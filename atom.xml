<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>10buns</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://10buns.com/"/>
  <updated>2019-01-22T14:51:19.066Z</updated>
  <id>http://10buns.com/</id>
  
  <author>
    <name>10buns</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 安装 Redis&amp;Mysql&amp;portainer</title>
    <link href="http://10buns.com/2019/01/01/Docker-%E5%AE%89%E8%A3%85-Redis-Mysql-portainer/"/>
    <id>http://10buns.com/2019/01/01/Docker-安装-Redis-Mysql-portainer/</id>
    <published>2019-01-01T07:58:11.000Z</published>
    <updated>2019-01-22T14:51:19.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull portainer</span><br><span class="line">$ docker volume create ~/dev/docker_volume/data</span><br><span class="line">$ docker run -d -p 9000:9000 \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v portainer_data:/data \</span><br><span class="line">    --name prtainer\</span><br><span class="line">    portainer</span><br></pre></td></tr></table></figure><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull redis:3.2</span><br><span class="line">$ docker run -p 6379:6379 --restart=always \</span><br><span class="line">    -v ~/dev/docker_volume/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">    -v ~/dev/docker_volume/redis:/data \</span><br><span class="line">    --name redis\</span><br><span class="line">    -d redis redis-server /data/redis.conf</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql \</span><br><span class="line">    -v /dev/docker_volume/mysql/data:/var/lib/mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    -p 6630:3306 \</span><br><span class="line">    -d mysql.5.7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Portainer&quot;&gt;&lt;a href=&quot;#Portainer&quot; class=&quot;headerlink&quot; title=&quot;Portainer&quot;&gt;&lt;/a&gt;Portainer&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2 入门</title>
    <link href="http://10buns.com/2018/12/15/Spring-Security-Oauth2-%E5%85%A5%E9%97%A8/"/>
    <id>http://10buns.com/2018/12/15/Spring-Security-Oauth2-入门/</id>
    <published>2018-12-15T03:35:29.000Z</published>
    <updated>2019-01-22T14:51:28.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们提供对外的<code>HTTP</code>服务时，需要有一套机制来保证服务的安全。此时可以选择使用<code>aouth2</code>作为一种方案。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>使用<code>Spring Security Oauth2</code>主要包含三个步骤:</p><ol><li>配置 <code>Security</code></li><li>配置认证服务器</li><li>配置资源服务器</li></ol><p><code>oauth2</code>提供了四种模式来应对不同的使用场景:</p><ul><li>授权码模式（Authorization Code） </li><li>授权码简化模式（Implicit） </li><li>密码模式（Resource Owner Password Credentials） </li><li>客户端模式（Client Credentials） </li><li>扩展模式（Extension）</li></ul><p>不论哪种模式，都是通过从认证服务器获取<code>Access Token</code>，以用来访问资源服务器。<br>而申请<code>Access Token</code>，需要提交相应信息。例如<code>Client_ID(我是谁)</code>，<code>response_type</code>或<code>grant_typt</code>(申请哪种模式)，<code>scope</code>(申请哪些权限，由授权服务器定义)，<code>redirect_uri</code>(申请结果跳转至哪儿)等。</p><h2 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h2><p><img src="https://github.com/10Buns/pictureForMarkDown/raw/master/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E5%BC%8F.png" alt="客户端模式"><br>该模式并不是对个体用户授权，而是被授权的主体为client</p><h2 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h2><p><img src="https://github.com/10Buns/pictureForMarkDown/raw/master/%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F.png" alt="密码模式"></p><blockquote><p>需要用户将自身的<code>account id</code> 和<code>password</code>交由<code>client</code>，<code>client</code>将使用它们来申请<code>access token</code>，整个过程会将用户信息暴露。除非<code>client</code>十分可靠(例如自有应用)，否则不推荐使用。</p></blockquote><h2 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h2><p><img src="https://github.com/10Buns/pictureForMarkDown/raw/master/%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F.png" alt="授权码模式"></p><p>流程:</p><ol><li>网站向用户展示，支持QQ、微信、支付宝等第三方式登录。用户选择其中一种，例如QQ，则跳转至QQ界面（User-Agent），通常为WEB界面。此时，若用户未登录，则要求用户登录，若已登录，则询问是否授权，以及展示授权后会获得哪些权限。 </li><li>用户点击授权，触发申请。 </li><li>假设授权通过，QQ认证服务器将用户导向网站事先指定的”重定向URI”（redirection URI），同时附上一个Authorization Code。 </li><li>网站收到授权码，附上之前的”重定向URI”，向认证服务器申请Access Token。这一步是在网站的后台的服务器上完成的，对用户不可见。 </li><li>认证服务器核对了授权码和重定向URI，确认无误后，向网站发送访问令牌（access token）和更新令牌（refresh token)</li></ol><h2 id="授权码简化模式"><a href="#授权码简化模式" class="headerlink" title="授权码简化模式"></a>授权码简化模式</h2><p>在授权码模式中<code>authorization code</code>和<code>access token</code>都由授权服务器生成和验证，但只使用了<code>access token</code>，使得<code>authorization code</code>多余。因此在授权码简化模式，舍弃<code>authorization code</code>，直接通过<code>user-agent</code>直接申请<code>access token</code></p><h2 id="扩展模式"><a href="#扩展模式" class="headerlink" title="扩展模式"></a>扩展模式</h2><p>是一种自定义模式，规范中仅对<code>grant type</code>参数提出了必须是<code>URI</code>的要求，对于其他申请数据，可以自行定义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当我们提供对外的&lt;code&gt;HTTP&lt;/code&gt;服务时，需要有一套机制来保证服务的安全。此时可以选择使用&lt;code&gt;aouth2&lt;/cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos 安装 redis</title>
    <link href="http://10buns.com/2018/10/05/centos-%E5%AE%89%E8%A3%85-redis/"/>
    <id>http://10buns.com/2018/10/05/centos-安装-redis/</id>
    <published>2018-10-05T02:35:04.000Z</published>
    <updated>2019-01-22T14:50:42.667Z</updated>
    
    <content type="html"><![CDATA[<p>安装 gcc 和 make</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc make</span><br></pre></td></tr></table></figure><p>下载压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://download.redis.io/releases/redis-3.0.4.tar.gz -o </span><br><span class="line">redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure><p>解压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar zxvf redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure><p>编译 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ d redis-3.0.4</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>安装 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ cp redis-server redis-cli /usr/local/bin</span><br><span class="line">$ cp redis-sentinel redis-benchmark redis-check-aof redis-check-dump /usr/local/bin</span><br><span class="line">$ mkdir /etc/redis</span><br><span class="line">$ mkdir -p /var/lib/redis/6379</span><br></pre></td></tr></table></figure><p>配置 vm.overcommit_memory 为1，这可以避免数据被截断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.overcommit_memory=1</span><br></pre></td></tr></table></figure><p>修改 backlog 连接数的最大值超过 redis.conf 中的 tcp-backlog 值，即默认值511</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -w net.core.somaxconn=512</span><br></pre></td></tr></table></figure><p>取消对透明巨页内存（transparent huge pages）的支持，因为这会造成 redis 使用过程产生延时和内存访问问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure><p>复制示例的 redis.conf 到 /etc/redis/6379.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure><p>修改参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/redis/6379.conf</span><br><span class="line">daemonize no</span><br><span class="line">pidfile /var/run/redis_6379.pid </span><br><span class="line">port 6379 #修改端口</span><br><span class="line">dir /var/lib/redis/6379 #设置目录</span><br><span class="line">requirepass &quot;123456&quot; # 修改密码</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/bin/redis-server /etc/redis/6379.conf</span><br><span class="line">$ /usr/local/bin/redis-cli # 访问</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装 gcc 和 make&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅说java集合框架</title>
    <link href="http://10buns.com/2018/09/01/%E6%B5%85%E8%AF%B4java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://10buns.com/2018/09/01/浅说java集合框架/</id>
    <published>2018-09-01T15:42:50.000Z</published>
    <updated>2018-09-02T16:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java 集合框架也称为容器 ，本文主要对如下部分进行源码分析，并讲解面试中常见问题 。</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java 集合框架位于<code>java.util</code>包下 ，主要有三个大类 : Collection(接口) 、Map(接口) 、集合工具类。提供了数据持有对象的方式 、对数据集合的操作。</p><p><img src="http://olt1b0ecs.bkt.clouddn.com/java 集合框架图.gif" alt="java 集合框架图"></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><ul><li><p>ArrayList：线程不同步。默认初始容量为 10，当数组大小不足时容量扩大为 1.5 倍。为追求效率，没有实现同步（synchronized），若需要并发访问，只能可动同步，也可使用 Vector 替代。</p></li><li><p>LinkedList：线程不同步。双向链接实现。LinkedList 同时实现了 List 接口和 Deque 接口，既可以看作一个顺序容器，又可以看作一个队列，还可以看作一个栈。</p></li><li><p>Stack &amp; Queue：Java 有 Stack 类，但并没有叫做 Queue 的类，只有 Queue 接口，他。当需要使用栈时，推荐使用更高效的 ArrayDeque；当需要使用队列时也就首选 ArrayDeque。</p></li><li><p>Vector：线程同步。默认初始容量为 10，当数组大小不足时容量扩大为 2 倍。它的同步是通过 Iterator 方法加 synchronized 实现的。</p></li><li><p>TreeSet：线程不同步，内部使用 NavigableMap 操作。默认元素 <code>自然顺序</code> 排列，可以通过 Comparator 改变排序。TreeSet 里面有一个 TreeMap（适配器模式）。</p></li><li><p>HashSet：线程不同步，内部使用 HashMap 进行数据存储，提供的方法基本都是调用 HashMap 的方法，所以两者本质是一样的。集合元素可以为 NULL。</p></li><li><p>Set：Set 是一种不包含重复元素的 Collection，Set 最多只有一个 null 元素。Set 集合通常可以通过 Map 集合通过适配器模式得到。</p></li><li><p>PriorityQueue：Java 中 PriorityQueue 实现了 Queue 接口，不允许放入 null 元素；其通过堆实现，具体说是通过完全二叉树（complete binary tree）实现的小顶堆（任意一个非叶子节点的权值，都不大于其左右子节点的权值），也就意味着可以通过数组来作为 PriorityQueue 的底层实现。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2></li><li><p>TreeMap：线程不同步，基于<code>红黑树（Red-Black tree）</code>的 NavigableMap 实现，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。</p></li><li><p>HashTable：线程安全，HashMap 的迭代器 (Iterator) 是 fail-fast 迭代器。HashTable 不能存储 NULL 的 key 和 value。</p></li><li><p>HashMap：线程不同步。根据 key 的 hashcode 进行存储，内部使用静态内部类 Node 的数组进行存储，默认初始大小为 16，每次扩大一倍。当发生 Hash 冲突时，采用拉链法（链表）。JDK 1.8中：当单个桶中元素个数大于等于8时，链表实现改为红黑树实现；当元素个数小于6时，变回链表实现。由此来防止hashCode攻击。HashMap 是 Hashtable 的轻量级实现，可以接受为 null 的键值 (key) 和值 (value)，而 Hashtable 不允许。</p></li><li><p>LinkedHashMap：保存了记录的插入顺序，在用 Iterator 遍历 LinkedHashMap 时，先得到的记录肯定是先插入的。也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比 HashMap 慢，不过有种情况例外，当 HashMap 容量很大，实际数据较少时，遍历起来可能会比 LinkedHashMap 慢，因为 LinkedHashMap 的遍历速度只和实际数据有关，和容量无关，而 HashMap 的遍历速度和他的容量有关。</p></li><li><p>WeakHashMap：在 WeakHashMap 里的 entry 可能会被 GC 自动删除，即使没有手动调用 remove() 或者 clear() 方法。 WeakHashMap 的存储结构类似于HashMap。</p></li></ul><h2 id="容器实现"><a href="#容器实现" class="headerlink" title="容器实现"></a>容器实现</h2><p><img src="http://olt1b0ecs.bkt.clouddn.com/java 容器通用实现.png" alt="java 容器通用实现"></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="ArryList"><a href="#ArryList" class="headerlink" title="ArryList"></a>ArryList</h2><p>实现 List、RandomAccess 接口 , 可以插入空数据 , 也支持随机访问。</p><p>ArrayList相当于动态数据，其中最重要的两个属性分别是: elementData 数组 , 以及 size 大小 。在调用 add() 方法的时候 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>先进行扩容校验</li><li>将插入的值放到尾部，并将 size + 1 。</li></ol><p>如果调用 add(index , e) 指定位置添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    //复制，向后移动</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1, size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>先扩容校验</li><li>然后进行数据复制 , 把 index 位置空出存放本次插入的数据 , 并将其后数据后移 。</li></ol><p>扩容最终调用 grow(int minCapacity) , 也就是数据复制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);        </span><br><span class="line">    // minCapacity is usually close to size, so this is a win:</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此 ArraryList 主要性能消耗是数据扩容及指定位置添加数据 ，因此应减少指定位置插入及预先指定大小 。</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>因 ArrayList 基于动态数组实现 ，导致并不是完全使用所有空间 。因此用<code>transient</code>修饰，防止自动序列化 。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elementData;</span><br></pre></td></tr></table></figure><p>且 ArrayList 重写了 writeObject() 和 readObject() 来控制只序列化数组中有元素填充那部分内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">        throws java.io.IOException&#123;</span><br><span class="line">    // Write out element count, and any hidden stuff</span><br><span class="line">    int expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    // Write out size as capacity for behavioural compatibility with clone()</span><br><span class="line">    s.writeInt(size);</span><br><span class="line">    // Write out all elements in the proper order.</span><br><span class="line">    for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    if (modCount != expectedModCount) &#123;</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void readObject(java.io.ObjectInputStream s)</span><br><span class="line">        throws java.io.IOException, ClassNotFoundException&#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    // Read in size, and any hidden stuff</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    // Read in capacity</span><br><span class="line">    s.readInt(); // ignored</span><br><span class="line">    if (size &gt; 0) &#123;</span><br><span class="line">        // be like clone(), allocate array based upon size not capacity</span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line">    </span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        // Read in all elements in the proper order.</span><br><span class="line">        for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Java 集合框架也称为容器 ，本文主要对如下部分进行源码分析，并讲解面试中常见问题 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 基础(一)</title>
    <link href="http://10buns.com/2018/09/01/java-%E5%9F%BA%E7%A1%80-%E4%B8%80/"/>
    <id>http://10buns.com/2018/09/01/java-基础-一/</id>
    <published>2018-09-01T14:38:59.000Z</published>
    <updated>2019-01-22T15:13:41.762Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-java-中如何跳出当前多重循环"><a href="#1-java-中如何跳出当前多重循环" class="headerlink" title="1. java 中如何跳出当前多重循环"></a>1. java 中如何跳出当前多重循环</h3><p>使用标签语法， 循环前定义 <code>tag:</code> ，循环中 <code>break tag;</code></p><h3 id="2-写-clone-方法时，通常都有一行代码，为什么？"><a href="#2-写-clone-方法时，通常都有一行代码，为什么？" class="headerlink" title="2. 写 clone() 方法时，通常都有一行代码，为什么？"></a>2. 写 clone() 方法时，通常都有一行代码，为什么？</h3><p>clone 有缺省行为，<code>super.clone()</code>; 因此首先要把父类成员复制结束，然后才能复制自己的成员</p><h3 id="3-java-实现多态的机制？"><a href="#3-java-实现多态的机制？" class="headerlink" title="3. java 实现多态的机制？"></a>3. java 实现多态的机制？</h3><p>靠的是父类或接口定义的饮用变量可以指向子类或者实现类的实例对象，而程序调用的方法在运行期才动态绑定</p><h3 id="4-基本数据类型"><a href="#4-基本数据类型" class="headerlink" title="4. 基本数据类型"></a>4. 基本数据类型</h3><p>byte, int, char, long, float, boolean, short, double</p><h3 id="5-多线程有几种实现方法？同步有几种？"><a href="#5-多线程有几种实现方法？同步有几种？" class="headerlink" title="5. 多线程有几种实现方法？同步有几种？"></a>5. 多线程有几种实现方法？同步有几种？</h3><p>多线程: thread ,实现 Runnable 接口, 使用ExecutorService、Callable、Future实现有返回结果的多线程</p><p>同步: synchronized, wait, notify</p><h3 id="6-synchronized-与-Lock-区别"><a href="#6-synchronized-与-Lock-区别" class="headerlink" title="6. synchronized 与 Lock 区别"></a>6. synchronized 与 Lock 区别</h3><p>相同点: Lock 可以完成 synchronized 所有的功能</p><p>异同点: Lock 比 synchronized 更为精确的线程语义和性能</p><p>synchronized 会自动释放锁， Lock 必须手动释放</p><h1 id="7-heap-与-stack-区别"><a href="#7-heap-与-stack-区别" class="headerlink" title="7. heap 与 stack 区别"></a>7. heap 与 stack 区别</h1><p>java 内存分为<code>栈内存</code>和<code>堆内存</code> </p><p>栈内存指程序进入一个方法时，会位这个方法单独分配一块私属存储，用于存储这个方法私有变量，方法结束时会回收内存。</p><p>堆一般用于存放不放在当前方法栈中的数据，比如对象，所以不会随方法结束而回收。final修饰的局部变量放在堆中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-java-中如何跳出当前多重循环&quot;&gt;&lt;a href=&quot;#1-java-中如何跳出当前多重循环&quot; class=&quot;headerlink&quot; title=&quot;1. java 中如何跳出当前多重循环&quot;&gt;&lt;/a&gt;1. java 中如何跳出当前多重循环&lt;/h3&gt;&lt;p&gt;使用标签
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 基础(二)</title>
    <link href="http://10buns.com/2018/08/11/java-%E5%9F%BA%E7%A1%80-%E4%BA%8C/"/>
    <id>http://10buns.com/2018/08/11/java-基础-二/</id>
    <published>2018-08-10T16:40:46.000Z</published>
    <updated>2019-01-23T17:04:59.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Object有哪些公用方法"><a href="#Object有哪些公用方法" class="headerlink" title="Object有哪些公用方法"></a>Object有哪些公用方法</h3><ul><li><p>clone 保护方法，实现对象的浅复制，只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。</p></li><li><p>equals 在Object中与==是一样的，子类一般需要重写该方法。</p></li><li><p>hashCode 该方法用于哈希查找，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。</p></li><li><p>getClass final方法，获得运行时类型</p></li><li><p>wait 使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。 wait() 方法一直等待，直到获得锁或者被中断。 wait(long timeout) 设定一个超时间隔，如果在规定时间内没有获得锁就返回。</p></li><li><p>notify 唤醒在该对象上等待的某个线程。</p></li><li><p>notifyAll 唤醒在该对象上等待的所有线程。</p></li><li><p>toString 转换成字符串，一般子类都有重写，否则打印句柄。</p></li></ul><h3 id="Java的四种引用，强弱软虚，用到的场景"><a href="#Java的四种引用，强弱软虚，用到的场景" class="headerlink" title="Java的四种引用，强弱软虚，用到的场景"></a>Java的四种引用，强弱软虚，用到的场景</h3><ol><li>强引用</li></ol><p>最普遍的一种引用方式，如String s = “abc”，变量s就是字符串“abc”的强引用，只要强引用存在，则垃圾回收器就不会回收这个对象。</p><ol start="2"><li>软引用（SoftReference）</li></ol><p>用于描述还有用但非必须的对象，如果内存足够，不回收，如果内存不足，则回收。一般用于实现内存敏感的高速缓存，软引用可以和引用队列ReferenceQueue联合使用，如果软引用的对象被垃圾回收，JVM就会把这个软引用加入到与之关联的引用队列中。</p><ol start="3"><li>弱引用（WeakReference）</li></ol><p>弱引用和软引用大致相同，弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。</p><ol start="4"><li>虚引用（PhantomReference）</li></ol><p>就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 虚引用主要用来跟踪对象被垃圾回收器回收的活动。</p><blockquote><p>虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Object有哪些公用方法&quot;&gt;&lt;a href=&quot;#Object有哪些公用方法&quot; class=&quot;headerlink&quot; title=&quot;Object有哪些公用方法&quot;&gt;&lt;/a&gt;Object有哪些公用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;clone 保护方法，实现对象的浅
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【 浅析 Spring WebFlux 】什么是响应式编程 ( 一 )</title>
    <link href="http://10buns.com/2018/08/07/%E4%BB%80%E4%B9%88%E6%98%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://10buns.com/2018/08/07/什么是响应式编程/</id>
    <published>2018-08-06T16:29:53.000Z</published>
    <updated>2018-08-09T17:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是响应式编程"><a href="#什么是响应式编程" class="headerlink" title="什么是响应式编程"></a>什么是响应式编程</h2><p>开始之前 ，我们举一个例子——购物车。</p><blockquote><p>我们经常网上购物 ，购物车中添加了各种想买的和不确定是否必须买的商品 。以我自己来说 ，只有在平台搞活动才会购物车清空 ，但是每次购买都是有预算的 ，遇到商家的各种满减 、优惠券等怎么才能最大限度的买自己想买的东西呢 ？常见的电商购物车都有商品 、优惠 、邮费 、总价 。</p></blockquote><h4 id="1-The-propagation-of-change-变化传播"><a href="#1-The-propagation-of-change-变化传播" class="headerlink" title="1. The propagation of change 变化传播"></a>1. <code>The propagation of change</code> 变化传播</h4><p>为什么用购物车来举例 ？当购物车的总价超出预算或者有更优惠的组合时 ，通过购物车删减商品后 ，都会被实时的更新总价 。</p><p>总价计算初始化时候监听购物车 ，一旦购物车有对应的价格计算的响应事件 ，总价计算就会响应这些事件 ，根据定义好的<code>单价 x 数量</code>进行计算总价 。 好比 Android 开发中的各种监听器 ， 声音的监听 ，摄像头的监听等 。</p><p>一件商品发生变化后 ，会使引用它的地方发生变化 。这就是<strong><em>响应式的第一个核心特点 ：变化传播</em></strong> 。这就是<strong><em>响应式的第一个核心特点 ：变化传播</em></strong> ，简单来说就是以一个数据流为输入，经过一连串操作转化为另一个数据流，然后分发给各个订阅者的过程 。这就有点像函数式编程中的组合函数 ，将多个函数串联起来 ，把一组输入数据转化为格式迥异的输出数据 。</p><h4 id="2-Data-streams-数据流"><a href="#2-Data-streams-数据流" class="headerlink" title="2. Data streams 数据流"></a>2. <code>Data streams</code> 数据流</h4><p>回头再看下购物车 ，现在已经有了一些商品 ，然后我每次里添加商品、删减商品数量 ，这种事件都会像一个个水珠经过水管流动 。这些操作事件连起来就是一串数据流（data stream）。这是<strong><em>响应式的第二个核心特点：基于数据流</em></strong> ，其中又分为静态数据流（比如数组 、文件）和动态数据流（比如事件流 、日志流）两种 。基于数据流模型 ，响应式编程得以提供一套统一的 Stream 风格的数据处理接口 。和 Java 8 中的 Stream API 相比 ，响应式编程 API 除了支持静态数据流 ，还支持动态数据流 ，并且允许复用和同时接入多个订阅者 。</p><h4 id="3-Declarative-声明式"><a href="#3-Declarative-声明式" class="headerlink" title="3. Declarative 声明式"></a>3. <code>Declarative</code> 声明式</h4><p>接着上面 ，我们说到总价计算会响应事件 ，根据预先定义好的公式进行计算总价 。这是一种 <strong><em>声明式</em></strong> 的编程范式 。通过串起来的 map 调用 ，先声明好对于数据流将进行怎样的处理 ，当有数据流过来时 ，就会按照声明的流程进行处理 。</p><p><img src="http://olt1b0ecs.bkt.clouddn.com/屏幕快照 2018-08-10 00.57.06.png" alt="价格计算事件流"></p><p>无论购物车的商品如何变化 ，总价的计算逻辑是不变的 ，从而形成了一种对计算逻辑的 <code>绑定</code> 。</p><p><strong><em>一句话 ，响应式编程是一种基于<code>变化传递</code>和<code>数据流</code>的<code>声明式</code>的编程范式 。</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是响应式编程&quot;&gt;&lt;a href=&quot;#什么是响应式编程&quot; class=&quot;headerlink&quot; title=&quot;什么是响应式编程&quot;&gt;&lt;/a&gt;什么是响应式编程&lt;/h2&gt;&lt;p&gt;开始之前 ，我们举一个例子——购物车。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们经常网上
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring事务配置</title>
    <link href="http://10buns.com/2018/07/18/Spring%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <id>http://10buns.com/2018/07/18/Spring事务配置/</id>
    <published>2018-07-18T07:49:53.000Z</published>
    <updated>2018-07-18T09:04:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://olt1b0ecs.bkt.clouddn.com/Spring 事务配置-1.png" alt="Spring 事务配置"></p><blockquote><p>Spring 配置文件中关于事务配置总是由三个组成部分，分别是 DataSource 、TransactionManager 和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分 。</p></blockquote><p>Spring 声明式事务让我们从复杂的事务处理中得到解脱 。使得无需要去处理获得连接、关闭连接、事务提交和回滚等这些操作 ，更不需要在与事务相关的方法中处理大量的 try…catch…finally 代码 。 </p><p>在使用 Spring 声明式事务时 ，有一个非常重要的概念就是事务属性 。事务属性通常由事务的传播行为 、事务的隔离级别 、事务的超时值和事务只读标志组成 。在进行事务划分时 ，需要进行事务定义 ，也就是配置事务的属性 。 </p><p>Spring 在 TransactionDefinition 接口中定义这些属性 ，以供PlatformTransactionManager 使用 ， PlatformTransactionManager 是 spring 事务管理的核心接口 。</p><p><strong>PlatformTransactionManager接口定义如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface PlatformTransactionManager &#123;  </span><br><span class="line">    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;  </span><br><span class="line">    void commit(TransactionStatus status) throws TransactionException;  </span><br><span class="line">    void rollback(TransactionStatus status) throws TransactionException;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>getTransaction(): 返回一个已经激活的事务或创建一个新的事务（根据给定的 TransactionDefinition 类型参数定义的事务属性），返回的是 TransactionStatus 对象代表了当前事务的状态，其中该方法抛出 TransactionException（未检查异常）表示事务由于某种原因失败。</li><li>commit(): 用于提交 TransactionStatus 参数代表的事务</li><li>rollback(): 用于回滚 TransactionStatus 参数代表的事务</li></ul></blockquote><p><strong>TransactionDefinition接口定义如下：</strong></p><pre><code>public interface TransactionDefinition {      int getPropagationBehavior();      int getIsolationLevel();      int getTimeout();      boolean isReadOnly();  }  </code></pre><blockquote><ul><li>getPropagationBehavior(): 返回定义的事务传播行为</li><li>getIsolationLevel(): 返回定义的事务隔离级别</li><li>getTimeout(): 返回定义的事务超时时间</li><li>isReadOnly(): 返回定义的事务是否是只读的</li><li>getName(): 返回定义的事务名字</li></ul></blockquote><p>在TransactionDefinition接口中定义了五个不同的事务隔离级别:</p><p><strong>ISOLATION_DEFAULT</strong> 这是一个 PlatformTransactionManager 默认的隔离级别 ，使用数据库默认的事务隔离级别 。另外四个与JDBC的隔离级别相对应<br><strong>ISOLATION_READ_UNCOMMITTED</strong> 这是事务最低的隔离级别 ，它充许别外一个事务可以看到这个事务未提交的数据 。这种隔离级别会产生脏读 ，不可重复读和幻像读</p><blockquote><p>举个例子 ，别人通过支付宝转账 1W , 但未提交事务 。 此时我们查询支付宝余额 ，看到账户多了 1W 很开心 。这时支付宝发现转账账号错了回滚事务 ，此时余额变为 0 。这个读取的 1W 就是产生的脏数据</p></blockquote><p><strong>ISOLATION_READ_COMMITTED</strong> 保证一个事务修改的数据提交后才能被另外一个事务读取 。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读</p><blockquote></blockquote><p><strong>ISOLATION_REPEATABLE_READ</strong>  这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)<br><strong>ISOLATION_SERIALIZABLE</strong> 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://olt1b0ecs.bkt.clouddn.com/Spring 事务配置-1.png&quot; alt=&quot;Spring 事务配置&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring 配置文件中关于事务配置总是由三个组成部分，分别是 Data
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC请求处理流程</title>
    <link href="http://10buns.com/2018/07/18/SpringMVC%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
    <id>http://10buns.com/2018/07/18/SpringMVC请求处理流程/</id>
    <published>2018-07-18T07:37:42.000Z</published>
    <updated>2018-07-18T07:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://olt1b0ecs.bkt.clouddn.com/Spring MVC请求处理流程.png" alt="Spring MVC请求处理流程"></p><h3 id="Spring-MVC请求处理流程"><a href="#Spring-MVC请求处理流程" class="headerlink" title="Spring MVC请求处理流程"></a>Spring MVC请求处理流程</h3><ol><li>客户端发送请求 -&gt; DispatcherServlet ，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制</li><li>DispatcherServlet —&gt; HandlerMapping ，HandlerMapping 将会把请求映射为HandlerExecutionChain 对象（包含一个 Handler 处理器（页面控制器）对象 、多个HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略</li><li>DispatcherServlet —&gt; HandlerAdapter ，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器</li><li>HandlerAdapter —&gt; 处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个 ModelAndView 对象（包含模型数据、逻辑视图名）</li><li>ModelAndView 的逻辑视图名—&gt; ViewResolver ， ViewResolver 将把逻辑视图名解析为具体的 View ，通过这种策略模式，很容易更换其他视图技术；</li><li>View —&gt; 渲染，View 会根据传进来的 Model 模型数据进行渲染，此处的 Model 实际是一个 Map 数据结构，因此很容易支持其他视图技术</li><li>返回控制权给 DispatcherServlet ，由 DispatcherServlet 返回响应给用户，到此一个流程结束</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://olt1b0ecs.bkt.clouddn.com/Spring MVC请求处理流程.png&quot; alt=&quot;Spring MVC请求处理流程&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Spring-MVC请求处理流程&quot;&gt;&lt;a href=&quot;#Spring-M
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://10buns.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>可能把Java注解讲的最清楚的一篇文章</title>
    <link href="http://10buns.com/2018/07/11/%E5%8F%AF%E8%83%BD%E6%8A%8AJava%E6%B3%A8%E8%A7%A3%E8%AE%B2%E7%9A%84%E6%9C%80%E6%B8%85%E6%A5%9A%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://10buns.com/2018/07/11/可能把Java注解讲的最清楚的一篇文章/</id>
    <published>2018-07-11T07:09:31.000Z</published>
    <updated>2018-07-11T09:10:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><blockquote><p>在 Java 中 Annotation是一个很重要的知识点 , 中文翻译过来就是注解 、批注的意思 。</p></blockquote><p>第一次学习注解的时候 , 看了很多文章解释一堆 , 但是感觉太抽象 ,  对初学者不是很友好 。</p><p>之前一直在思考怎么才能浅显易懂的介绍注解 ,  我就想啊想 。。。</p><p>。。。</p><p>终于想到了一个很好的东西来解释注解 ,  现在网上对讨厌的人会给贴一个傻逼 、五毛 、睿智 ,  对喜欢的会贴个帅哥、小姐姐之类的标签 。但不管贴什么标签 , 人还是那个人 。 只是由于贴了不同的标签 ,  导致大家对这个人的看法会不一样 。</p><p>到这里 ,  我们可以用比喻的手法来解释注解了 : </p><blockquote><p>如果把代码看成由一个个独立个体组成的群体 ,  那么注解就是给这些个体 ,  也就是方法 、类 、包等贴上一个标签 。 那么也可以直接说注解就是标签 。</p></blockquote><h3 id="怎么定义注解"><a href="#怎么定义注解" class="headerlink" title="怎么定义注解"></a>怎么定义注解</h3><blockquote><p>注解通过 @interface 关键字进行定义 。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public @interface SampleAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="如何使用注解"><a href="#如何使用注解" class="headerlink" title="如何使用注解"></a>如何使用注解</h3><p>定义好了一个注解， 那如何使用呢 ？ 创建一个方法或者类 ，然后在方法或者类定义的地方加上 @SampleAnnotation 就可以用 SampleAnnotation 注解这个类了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@SampleAnnotation</span><br><span class="line">public class Sample &#123;&#125;</span><br></pre></td></tr></table></figure><p>目前我们只是使用了注解 ，但还不能正常的执行 。 若想让他正常的工作 ，我们还需要引入一个新的概念 元注解 。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>可以注解到注解上的注解就叫元注解 ，主要有 @Retention、@Inherited、@Target、@Documented、@Repeatable 5 种。</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>Retention 的英文直译就是保留。其用到一个注解上，用于说明这个注解的的存活时间。</p><p>有如下取值： </p><ul><li>RetentionPolicy.SOURCE 只在源码阶段保留 ，在编译器进行编译时将被丢弃忽视 。 </li><li>RetentionPolicy.CLASS 只被保留到编译进行的时候 ，并不会被加载到 JVM 中 。 </li><li>RetentionPolicy.RUNTIME 可以保留到程序运行的时候 ，它会被加载进入到 JVM 中 ，所以在程序运行时可以获取到它们 。 </li></ul><blockquote><p>如果注解说是一个标签 ，@Retention 就可以看成是给标签盖了一个时间戳 。</p></blockquote><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p>@Inherited 并不是说注解本身可以继承 ，而是说如果一个父类被 @Inherited 注解过的注解进行注解的话 ，如果子类没有被任何注解应用的话 ，那么这个子类就继承了父类的注解 。 </p><blockquote><p>换而言之 ，王健林非常有钱被人贴了一个土豪的标签 ，那么他儿子王思聪还没出名时没人给贴标签 ， 但是自然也是个富二代土豪 。</p></blockquote><p>代码如下 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Inherited</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@interface InheritedSample&#123;&#125;</span><br><span class="line"></span><br><span class="line">@InheritedSample</span><br><span class="line">public class Parent&#123;&#125;</span><br><span class="line"></span><br><span class="line">public class Son extends Parent&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>@Target 限定了注解的使用场景 。</p><blockquote><p>如果注解时标签 ，那么 @Target 限定使用场景好比 ，不同的标签有不同的场景 ， 你就不能说一个美女是帅哥、长腿欧巴。</p></blockquote><p>有如下取值 :</p><ul><li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li><li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li><li>ElementType.FIELD 可以给属性进行注解</li><li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li><li>ElementType.METHOD 可以给方法进行注解</li><li>ElementType.PACKAGE 可以给一个包进行注解</li><li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li><li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li></ul><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><p>作用是能够将注解中的元素包含到 JavaDoc 中去 。</p><h4 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h4><p>可重复的 ，是 JDK 1.8 才加入的新特性。</p><blockquote><p>什么场景下需要多次应用呢 ，比如我是一个程序员 ，同时我也是一个帅哥 、宅男 。</p></blockquote><p>代码如下 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@interface Men &#123;</span><br><span class="line">    Man[]  value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Repeatable(Men.class)</span><br><span class="line">@interface Man&#123;</span><br><span class="line">    String role default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Man(role=&quot;Homebody&quot;)</span><br><span class="line">@Man(role=&quot;HandSome&quot;)</span><br><span class="line">@Man(role=&quot;Devloper&quot;)</span><br><span class="line">public class Baozi&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h3><p>注解的属性也就是成员变量 。注解只有成员变量 ，没有方法 。注解的成员变量在注解的定义中以<code>无形参的方法</code>形式来声明 ，方法名定义了该成员变量的名字 ，返回值定义了该成员变量的类型。</p><blockquote><p>属性的类型必须是 8 种基本数据类型加上类 、接口 、注解及其数组 。 也可以设置默认值 ，但需用 default 关键值指定 。</p></blockquote><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface SampleAnnotation &#123;</span><br><span class="line"></span><br><span class="line">    int id() default 0 ;</span><br><span class="line"></span><br><span class="line">    String name() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@SampleAnnotation(id=0, name=&quot;测试注解&quot;)</span><br><span class="line">public class Sample &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解是怎么工作的"><a href="#注解是怎么工作的" class="headerlink" title="注解是怎么工作的"></a>注解是怎么工作的</h3><p>前面用标签来比喻注解 ，介绍了注解的语法和应用。但是此时我们只是可以定义 、应用注解 ，下面来说一下注解是怎么生效工作的 。</p><p>这里绕不开反射。</p><p>注解是通过反射获得 ，有如下几个步骤 :</p><ol><li>通过 Class 对象的 <code>isAnnotationPresent()</code> 方法判断是否使用了注解。</li><li><p>再通过 <code>getAnnotation()</code> 或者是 <code>getAnnotations()</code> 方法来获取注解对象 。</p><blockquote><p>前一方法返回指定类型的注解 ，后一方法返回这个元素上的所有注解 。</p></blockquote></li><li>如果可以获取到注解 ，就可以调用注解的属性方法了 。</li></ol><p>同样的 ，也可以获取属性和方法上的注解 。</p><p>代码如下 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@SampleAnnotation()</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    @Check(&quot;属性测试&quot;)</span><br><span class="line">    int a;</span><br><span class="line"></span><br><span class="line">    @Perform</span><br><span class="line">    public void printA()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        boolean hasAnnotation = Test.class.isAnnotationPresent(SampleAnnotation.class);</span><br><span class="line"></span><br><span class="line">        //获取类的注解  </span><br><span class="line">        if ( hasAnnotation ) &#123;</span><br><span class="line">            TestAnnotation testAnnotation = Test.class.getAnnotation(SampleAnnotation.class);</span><br><span class="line">            System.out.println(&quot;id:&quot; + testAnnotation.id());</span><br><span class="line">            System.out.println(&quot;name:&quot; + testAnnotation.name());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        try &#123;</span><br><span class="line">            //获取一个成员变量上的注解</span><br><span class="line">            Field a = Test.class.getDeclaredField(&quot;a&quot;);</span><br><span class="line">            //取消 Java 的权限控制检查</span><br><span class="line">            a.setAccessible(true);        </span><br><span class="line">            Check check = a.getAnnotation(Check.class);</span><br><span class="line">            if ( check != null ) &#123;</span><br><span class="line">                System.out.println(&quot;check value:&quot;+check.value());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 获取方法中的注解</span><br><span class="line">            Method testMethod = Test.class.getDeclaredMethod(&quot;printA&quot;);</span><br><span class="line">            if ( testMethod != null ) &#123;    </span><br><span class="line">                Annotation[] ans = testMethod.getAnnotations();</span><br><span class="line">                for( int i = 0;i &lt; ans.length;i++) &#123;</span><br><span class="line">                    System.out.println(&quot;method printA annotation:&quot;+ans[i].annotationType().getSimpleName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>必须要注意的是 ，如果注解要在运行时被提取 ，那么 @Retention 必须设置 RetentionPolicy.RUNTIME </p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>讲了这么多 ，那注解到底有什么用呢 ？<br>在官方文档中 ，有如下说明 :</p><blockquote><p>注解主要针对的是编译器和其它工具软件(SoftWare tool) 。当开发者使用了Annotation 修饰了类 、方法 、Field 等成员之后 ，这些 Annotation 不会自己生效 ，必须由开发者提供相应的代码来提取并处理 Annotation 信息 。这些处理提取和处理 Annotation 的代码统称为 APT（Annotation Processing Tool) 。</p></blockquote><p>此时我们心里有数了 ， 注解是给 APT 或者编译器用的。</p><p>实际开发中 ，使用注解的场景太多了 。 例如 Spring Boot 中使用 java 配置其实就是各种注解的使用 ，JUnit 测试框架 ，Lombok 等。</p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><ul><li>我们用标签来解释了注解 。</li><li>讲了注解的基本语法 、元注解 、属性等 。</li><li>注解的工作原理需要借助 Java 的反射 。</li><li>注解主要针对的是编译器和其它工具软件 。</li></ul><blockquote><p>感谢阅读 ，您的关注是我持续创作的动力 !</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在 Java 中 Annotation是一个很重要的知识点 , 中文翻译过来就是注解 、批
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>文案排版规范</title>
    <link href="http://10buns.com/2018/07/02/%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E8%A7%84%E8%8C%83/"/>
    <id>http://10buns.com/2018/07/02/文案排版规范/</id>
    <published>2018-07-02T07:00:28.000Z</published>
    <updated>2018-07-02T07:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>手机现在成了信息获取的主要来源。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;手机现在成了信息获取的主要来源。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swagger聚合微服务的API接口文档</title>
    <link href="http://10buns.com/2018/06/29/Swagger%E8%81%9A%E5%90%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84API%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    <id>http://10buns.com/2018/06/29/Swagger聚合微服务的API接口文档/</id>
    <published>2018-06-29T08:55:07.000Z</published>
    <updated>2018-06-29T14:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>团队中大量使用 Swagger 为项目中的接口生成 API 文档，但这些 API 文档都分散在各个微服务中，是否可以通过聚合这些 API 文档在一起呢？<br>在阅读 Swagger 源码后, 发现可以通过 SwaggerResourcesProvider 接口实现添加多个资源文档来源</p></blockquote><h2 id="0x01-基础环境搭建"><a href="#0x01-基础环境搭建" class="headerlink" title="0x01 基础环境搭建"></a>0x01 基础环境搭建</h2><ul><li>第一步 构建注册中心、测试服务、zuul 网关</li></ul><p><img src="http://olt1b0ecs.bkt.clouddn.com/屏幕快照 2018-06-29 22.06.06.png" alt="项目结构"></p><blockquote><p>discovery 注册中心<br>gaetway zuul 网关<br>ms-product 测试服务<br>ms-user 测试服务</p></blockquote><ul><li>第二步 完善服务</li></ul><p><img src="http://olt1b0ecs.bkt.clouddn.com/屏幕快照 2018-06-29 22.08.30.png" alt="测试服务接口"></p><p><img src="http://olt1b0ecs.bkt.clouddn.com/屏幕快照 2018-06-29 22.08.37.png" alt="测试服务 swagger 配置"></p><h2 id="0x02-zuul-网关整合-Swagger"><a href="#0x02-zuul-网关整合-Swagger" class="headerlink" title="0x02 zuul 网关整合 Swagger"></a>0x02 zuul 网关整合 Swagger</h2><p>核心是对 <code>SwaggerResourcesProvider</code> 的接口实现，通过<code>SwaggerResource</code> 添加多个文档来源。网关上 Swagger 会通过访问 <code>/ms-product/v2/api-docs</code> 和 <code>ms-user/v2/api-docs</code> 来加载两个文档内容，这两个请求会转发到 <code>ms-product</code> 和 <code>ms-user</code> 服务上的 <code>/v2/api-docs</code> 接口获得到 Swagger 的 JSON 文档，来达到文档聚合目的。</p><p><img src="http://olt1b0ecs.bkt.clouddn.com/屏幕快照 2018-06-29 22.11.31.png" alt="重写接口实现"></p><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>将微服务、网关以及注册中心启动之后，访问 zuul 的 Swagger 页面<code>http://localhost:9090/swagger-ui.html</code>，可以看到下图内容</p><p><img src="http://olt1b0ecs.bkt.clouddn.com/屏幕快照 2018-06-29 21.51.25.png" alt="swagger"></p><p><img src="http://olt1b0ecs.bkt.clouddn.com/屏幕快照 2018-06-29 21.51.38.png" alt="eureka"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;团队中大量使用 Swagger 为项目中的接口生成 API 文档，但这些 API 文档都分散在各个微服务中，是否可以通过聚合这些 API 文档在一起呢？&lt;br&gt;在阅读 Swagger 源码后, 发现可以通过 SwaggerResourcesProv
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决 .ignored tracked with git</title>
    <link href="http://10buns.com/2018/06/28/%E8%A7%A3%E5%86%B3-ignored-tracked-with-git/"/>
    <id>http://10buns.com/2018/06/28/解决-ignored-tracked-with-git/</id>
    <published>2018-06-28T07:07:02.000Z</published>
    <updated>2019-01-22T14:50:54.338Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -r --cached . </span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -am &quot;Remove ignored files&quot;</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring MyBatis 动态数据源切换</title>
    <link href="http://10buns.com/2018/06/26/Spring-MyBatis-%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
    <id>http://10buns.com/2018/06/26/Spring-MyBatis-动态数据源切换/</id>
    <published>2018-06-26T01:14:51.000Z</published>
    <updated>2018-06-26T02:13:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发中有一个需求，需要根据商户类型决定是否使用独立的数据库，即要动态的切换数据源。系统技术栈是 spring boot + mybatis, 常见的思路是基于不同的数据库创建不同的 bean 。</p><p>大体流程: 创建多个 <code>Configuration</code> 以及多个<code>Bean</code>,因为设为 <code>@Configuration</code>，所以在启动的时候 <code>Bean</code> 都会创建，默认走 <code>@Primary</code> 中的数据库连接，如果需要走其他的，只要在数据库 DAO中加上<code>@@qualifier(&quot;bean名&quot;)</code>即可。</p><p>但数据库可能是动态实时修改的，例如后台配置修改数据源，或者分库的场景。显然这种方法是走不通的。</p><p>在 Mybatis 中， <code>SqlSessionFactory</code> 负责创建SqlSession。虽然在初始化中相关 bean 已经创建完毕， 但是 bean 的一些属性是可以修改的。所以事先动态数据源切换，只需要修改对应的属性就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionFactory changeSqlSessionFactory() throws Exception&#123;</span><br><span class="line">        SqlSessionFactory bean = SVCAppContextAware.getBean(SqlSessionFactory.class);</span><br><span class="line">        DruidDataSource druidDataSource = new DruidDataSource();</span><br><span class="line">        //ds初始化</span><br><span class="line">        TransactionFactory transactionFactory =  new JdbcTransactionFactory();</span><br><span class="line">        Environment environment = new Environment(&quot;数据库名称&quot;, transactionFactory, druidDataSource);</span><br><span class="line">        bean.getConfiguration().setEnvironment(environment);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取 bean 的 configuration，然后修改Environment 的数据库连接。在需要对数据库变更的时候，只要重新调用<code>changeSqlSessionFactory</code>方法即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目开发中有一个需求，需要根据商户类型决定是否使用独立的数据库，即要动态的切换数据源。系统技术栈是 spring boot + mybatis, 常见的思路是基于不同的数据库创建不同的 bean 。&lt;/p&gt;
&lt;p&gt;大体流程: 创建多个 &lt;code&gt;Configuration
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微服务杂谈</title>
    <link href="http://10buns.com/2018/06/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%82%E8%B0%88/"/>
    <id>http://10buns.com/2018/06/20/微服务杂谈/</id>
    <published>2018-06-20T06:18:29.000Z</published>
    <updated>2018-06-20T06:18:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微服务与分布式"><a href="#微服务与分布式" class="headerlink" title="微服务与分布式"></a>微服务与分布式</h3><blockquote><p>微服务目前这么火，很多的文章拿它和分布式系统比较，但其实之间还是有很多的相同点</p></blockquote><ul><li>相同点<ol><li>都需要来实现动态的服务注册发现机制</li><li>都需要考虑分布式下面的事务一致性，CAP原则下两段式提交不能保证性能，还需要考虑事务补偿机制</li><li>如何保证消息可靠性</li><li>都需要统一的网关来聚合、编排接口，实现统一认证机制，对外提供 <code>API</code> 使用的接口</li><li>需要解决分布式下定位系统问题，如何日志跟踪，例如支付系统的交易跟踪</li></ol></li></ul><h3 id="切分微服务"><a href="#切分微服务" class="headerlink" title="切分微服务"></a>切分微服务</h3><ul><li><p>服务的切分上有比较大的区别，SOA原本是以一种<code>集成</code>技术出现的，很多技术方案是将原有内部服务封装为一个独立进程，这样新的业务开发就可重用这些服务，这些服务很可能是类似 CRM 这样的非常大的维度；而微服务这个<code>微</code>，就说明了在切分上是有讲究的。如果是错误的切分，那么得到微服务将没有 <code>低耦合、无缝升级、高可用</code> 之类的优势，而会比使用 <code>Monolithic</code> 有更多的麻烦</p></li><li><p>不拆分数据存储的微服务是伪服务：日常接触最多的一种服务拆分方案是后端存储是全在单库中，仅仅把前端的业务逻辑拆分到不同的服务进程中，本质上和一个 <code>Monolithic</code> 一样，只是把模块之间的进程内调用改为进程间调用，这种切分违反了 <code>分布式第一原则</code> ，不仅没有解决模块耦合问题也影响了系统性能</p></li><li><p>微服务并不是越小越好，而是相对 <code>SOA</code> 那种粗粒度的服务，只是需要更小更合适的粒度，但不是无限小</p></li></ul><h3 id="如何拆分服务"><a href="#如何拆分服务" class="headerlink" title="如何拆分服务"></a>如何拆分服务</h3><blockquote><p>在《领域驱动设计》这本书中提出了一个能将一个大问题空间拆解分为领域和实体之间的关系和行为的技术。目前来说，这是一个最合理的解决拆分问题的方案，透过限界上下文（Bounded Context，下文简称为BC）这个概念，我们可以将实现细节封装起来，让BC都能够实现SRP（单一职责）原则</p></blockquote><p>以会员系统的的积分与会员举例，按照 DDD 拆解，他们应该是两个独立的界限上下文，但积分服务中肯定包含会员的，如果直接拆为两个 BC, 那么查询、调用关系就耦合在一起了，甚至不知不觉引入了棘手的分布式问题，这个关联如何拆解？BC 理论认为在不同的 BC 中，即使是一个术语，它的关注点也不一样。在会员中关注的是会员信息、积分、储值等，而在积分中更关注的是积分与会员。所以实际开发中会员服务往往把积分、储值等冗余在会员中，这个设计解脱和积分 BC 的强关联，两个 BC 可以独立提供服务和存储数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微服务与分布式&quot;&gt;&lt;a href=&quot;#微服务与分布式&quot; class=&quot;headerlink&quot; title=&quot;微服务与分布式&quot;&gt;&lt;/a&gt;微服务与分布式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;微服务目前这么火，很多的文章拿它和分布式系统比较，但其实之间还是有很多的相
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 多线程(一)</title>
    <link href="http://10buns.com/2018/05/03/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%B8%80/"/>
    <id>http://10buns.com/2018/05/03/java-多线程-一/</id>
    <published>2018-05-03T14:57:16.000Z</published>
    <updated>2019-01-23T16:14:40.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是线程"><a href="#1-什么是线程" class="headerlink" title="1. 什么是线程"></a>1. 什么是线程</h3><p>线程是操作系统能够执行运算调度的最小单位，被包含在进程中，是进程的实际执行单位。</p><h3 id="2-什么是线程安全和不安全"><a href="#2-什么是线程安全和不安全" class="headerlink" title="2. 什么是线程安全和不安全"></a>2. 什么是线程安全和不安全</h3><p>线程安不安全主要区别就是是否加锁</p><p>线程安全问题都是由全局变量及静态变量引起的。 若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p><h3 id="3-什么是自旋锁"><a href="#3-什么是自旋锁" class="headerlink" title="3. 什么是自旋锁"></a>3. 什么是自旋锁</h3><p>自旋锁是<code>SMP</code>架构中一种<code>low-level</code>同步机制</p><p>当<code>线程1</code>想要获取一把自选锁而该锁又被其它线程锁持有时，<code>线程1</code>会在一个循环中自选以检测锁是不是已经可用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MyWaitNotify3</span><br><span class="line">&#123;</span><br><span class="line">    MonitorObject myMonitorObject = new MonitorObject();</span><br><span class="line">    boolean wasSignalled = false;</span><br><span class="line">    public void doWait()&#123;</span><br><span class="line">        synchronized(myMonitorObject)&#123;</span><br><span class="line">            while(!wasSignalled)&#123;        </span><br><span class="line">                try&#123;</span><br><span class="line">                  myMonitorObject.wait();         </span><br><span class="line">                &#125;</span><br><span class="line">                catch(InterruptedException ex)&#123;...&#125;      </span><br><span class="line">            &#125;</span><br><span class="line">            //clear signal and continue running.</span><br><span class="line">            wasSignalled = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    public void doNotify()&#123;</span><br><span class="line">        synchronized(myMonitorObject)&#123;</span><br><span class="line">            wasSignalled = true;</span><br><span class="line">            myMonitorObject.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-什么是Java内存模型"><a href="#4-什么是Java内存模型" class="headerlink" title="4. 什么是Java内存模型"></a>4. 什么是Java内存模型</h3><p>Java内存模型描述了在多线程代码中哪些行为是合法的，以及线程如何通过内存进行交互。它描述了<code>程序中的变量</code> 和 <code>从内存或者寄存器获取或存储它们的底层细节</code>之间的关系。Java内存模型通过使用各种各样的硬件和编译器的优化来正确实现以上事情。</p><p>JVM内存结构主要有三大块：<code>堆内存</code>、<code>方法区</code>和<code>栈</code></p><p><code>堆内存</code>:是JVM中最大的一块由年轻代和老年代组成，而年轻代内存又被分成三部分，<code>Eden空间</code>、<code>From Survivor空间</code>、<code>To Survivor空间</code>,默认情况下年轻代按照8:1:1的比例来分配。堆的唯一的目的是存放对象实例</p><p><code>方法区</code>:存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名Non-Heap(非堆)</p><p><code>栈</code>:分为java虚拟机栈和本地方法栈主要用于方法的执行</p><h3 id="5-什么是CAS"><a href="#5-什么是CAS" class="headerlink" title="5. 什么是CAS"></a>5. 什么是CAS</h3><p>CAS（compare and swap）的缩写，中文翻译成比较并交换。</p><p>利用CPU的CAS指令，同时借助JNI来完成Java的非阻塞算法,实现原子操作。其它原子操作都是利用类似的特性完成的。</p><p>CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。</p><p>使用CAS在线程冲突严重时，会大幅降低程序性能；CAS只适合于线程冲突较少的情况使用。</p><p>synchronized在jdk1.6之后，已经改进优化。synchronized的底层实现主要依靠Lock-Free的队列，基本思路是自旋后阻塞，竞争切换后继续竞争锁，稍微牺牲了公平性，但获得了高吞吐量。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。</p><h3 id="6-什么是乐观锁和悲观锁"><a href="#6-什么是乐观锁和悲观锁" class="headerlink" title="6. 什么是乐观锁和悲观锁"></a>6. 什么是乐观锁和悲观锁</h3><p><code>悲观锁</code>: Java在JDK1.5之前都是靠synchronized关键字保证同步的，这种通过使用一致的锁定协议来协调对共享状态的访问，可以确保无论哪个线程持有共享变量的锁，都采用独占的方式来访问这些变量。独占锁其实就是一种悲观锁，所以可以说synchronized是悲观锁。</p><p><code>乐观锁</code>: 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p><h3 id="7-什么是AQS"><a href="#7-什么是AQS" class="headerlink" title="7. 什么是AQS"></a>7. 什么是AQS</h3><p>AbstractQueuedSynchronizer简称AQS，是一个用于构建锁和同步容器的框架。事实上concurrent包内许多类都是基于AQS构建，例如ReentrantLock，Semaphore，CountDownLatch，ReentrantReadWriteLock，FutureTask等。AQS解决了在实现同步容器时设计的大量细节问题。</p><p>AQS使用一个FIFO的队列表示排队等待锁的线程，队列头节点称作“哨兵节点”或者“哑节点”，它不与任何线程关联。其他的节点与等待线程关联，每个节点维护一个等待状态waitStatus。</p><h3 id="8-什么是原子操作"><a href="#8-什么是原子操作" class="headerlink" title="8. 什么是原子操作"></a>8. 什么是原子操作</h3><p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。</p><h3 id="9-什么是Executors框架"><a href="#9-什么是Executors框架" class="headerlink" title="9. 什么是Executors框架"></a>9. 什么是Executors框架</h3><p>是一个根据一组执行策略调用、调度、执行和控制的异步任务的框架。利用Executors框架可以非常方便的创建一个线程池。</p><p>Java通过Executors提供四种线程池，分别为：</p><ul><li><p><code>newCachedThreadPool</code>:创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p></li><li><p><code>newFixedThreadPool</code>:创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p></li><li><p><code>newScheduledThreadPool</code>:创建一个定长线程池，支持定时及周期性任务执行。</p></li><li><p><code>newSingleThreadExecutor</code>:创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</p></li></ul><h3 id="10-什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？"><a href="#10-什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？" class="headerlink" title="10. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？"></a>10. 什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？</h3><p>阻塞队列是一个在队列基础上支持两个附加操作的队列。</p><ul><li><code>支持阻塞的插入方法</code>: 队列满时，队列会阻塞插入元素的线程，直到队列不满。 </li><li><code>支持阻塞的移除方法</code>: 队列空时，获取元素的线程会等待队列变为非空。</li></ul><p>BlockingQueue是一种数据结构，支持一个线程往里存资源，另一个线程从里取资源。这正是解决生产者消费者问题所需要的。</p><h3 id="11-什么是Callable和Future"><a href="#11-什么是Callable和Future" class="headerlink" title="11. 什么是Callable和Future?"></a>11. 什么是Callable和Future?</h3><p>当我们需要获取线程的执行结果时，就需要用到它们。Callable用于产生结果，Future用于获取结果。</p><p>Callable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法去在线程池中执行Callable内的任务。由于Callable任务是并行的，必须等待它返回的结果。java.util.concurrent.Future对象解决了这个问题。</p><p>在线程池提交Callable任务后返回了一个Future对象，使用它可以知道Callable任务的状态和得到Callable返回的执行结果。Future提供了get()方法，等待Callable结束并获取它的执行结果。</p><h3 id="12-什么是FutureTask"><a href="#12-什么是FutureTask" class="headerlink" title="12. 什么是FutureTask"></a>12. 什么是FutureTask</h3><p>FutureTask可用于异步获取执行结果或取消执行任务的场景。通过传入Runnable或者Callable的任务给FutureTask，直接调用其run方法或者放入线程池执行，之后可以在外部通过FutureTask的get方法异步获取执行结果，因此，FutureTask非常适合用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。另外，FutureTask还可以确保即使调用了多次run方法，它都只会执行一次Runnable或者Callable任务，或者通过cancel取消FutureTask的执行等。</p><h3 id="13-Condition接口及其实现原理"><a href="#13-Condition接口及其实现原理" class="headerlink" title="13. Condition接口及其实现原理"></a>13. Condition接口及其实现原理</h3><p>Condition是一个多线程间协调通信的工具类，使得某个或某些线程一起等待某个条件（Condition）,只有当该条件具备( signal 或者 signalAll方法被带调用)时 ，这些等待线程才会被唤醒，从而重新争夺锁。</p><p>Condition自己也维护了一个队列，该队列的作用是维护一个等待signal信号的队列，两个队列的作用是不同，事实上，每个线程也仅仅会同时存在以上两个队列中的一个，流程如下:</p><ol><li>线程1调用reentrantLock.lock时，线程被加入到AQS的等待队列中。</li><li>线程1调用await方法被调用时，该线程从AQS中移除，对应操作是锁的释放。</li><li>接着马上被加入到Condition的等待队列中，以为着该线程需要signal信号。</li><li>线程2，因为线程1释放锁的关系，被唤醒，并判断可以获取锁，于是线程2获取锁，并被加入到AQS的等待队列中。</li><li>线程2调用signal方法，这个时候Condition的等待队列中只有线程1一个节点，于是它被取出来，并被加入到AQS的等待队列中。 注意，这个时候，线程1 并没有被唤醒。</li><li>signal方法执行完毕，线程2调用reentrantLock.unLock()方法，释放锁。这个时候因为AQS中只有线程1，于是，AQS释放锁后按从头到尾的顺序唤醒线程时，线程1被唤醒，于是线程1回复执行。</li><li>直到释放所整个过程执行完毕。</li></ol><p>整个协作过程是靠结点在AQS的等待队列和Condition的等待队列中来回移动实现的，Condition作为一个条件类，很好的自己维护了一个等待信号的队列，并在适时的时候将结点加入到AQS的等待队列中来实现的唤醒操作。</p><h3 id="14-Fork-Join框架的理解"><a href="#14-Fork-Join框架的理解" class="headerlink" title="14. Fork/Join框架的理解"></a>14. Fork/Join框架的理解</h3><p>Fork/Join框架是一个实现了ExecutorService接口的多线程处理器。它可以把一个大的任务划分为若干个小的任务并发执行，充分利用可用的资源，进而提高应用的执行效率。</p><h3 id="15-wait-和sleep-的区别"><a href="#15-wait-和sleep-的区别" class="headerlink" title="15. wait()和sleep()的区别"></a>15. wait()和sleep()的区别</h3><p><code>sleep()方法</code>: 是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。</p><p>因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</p><p><code>wait()方法</code>:是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程</p><h3 id="16-线程的五个状态"><a href="#16-线程的五个状态" class="headerlink" title="16. 线程的五个状态"></a>16. 线程的五个状态</h3><ul><li>创建状态:在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。</li><li>就绪状态:当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后:也会处于就绪状态。</li><li>运行状态:线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。</li><li>阻塞状态:线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。</li><li>死亡状态:如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪</li></ul><h3 id="17-start-方法和run-方法的区别"><a href="#17-start-方法和run-方法的区别" class="headerlink" title="17. start()方法和run()方法的区别"></a>17. start()方法和run()方法的区别</h3><p>每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。</p><p>start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码；</p><p>run()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。</p><h3 id="18-Runnable接口和Callable接口的区别"><a href="#18-Runnable接口和Callable接口的区别" class="headerlink" title="18. Runnable接口和Callable接口的区别"></a>18. Runnable接口和Callable接口的区别</h3><ul><li>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已</li><li>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</li></ul><h3 id="19-volatile关键字的作用"><a href="#19-volatile关键字的作用" class="headerlink" title="19. volatile关键字的作用"></a>19. volatile关键字的作用</h3><p>多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据</p><h3 id="20-线程实现的方式有几种"><a href="#20-线程实现的方式有几种" class="headerlink" title="20. 线程实现的方式有几种"></a>20. 线程实现的方式有几种</h3><ul><li>继承Thread类，重写run方法</li><li>实现Runnable接口，重写run方法，实现Runnable接口的实现类的实例对象作为Thread构造函数的target</li><li>实现Callable接口通过FutureTask包装器来创建Thread线程</li><li>通过线程池创建线程</li></ul><h3 id="21-高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？"><a href="#21-高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？" class="headerlink" title="21. 高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？"></a>21. 高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？</h3><ol><li><p>高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换</p></li><li><p>并发不高、任务执行时间长的业务要区分开看：</p><ul><li>假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务</li><li>假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换</li></ul></li><li><p>并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p></li></ol><h3 id="22-生产者消费者模型的作用是什么"><a href="#22-生产者消费者模型的作用是什么" class="headerlink" title="22. 生产者消费者模型的作用是什么"></a>22. 生产者消费者模型的作用是什么</h3><ul><li><p>通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用</p></li><li><p>解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p></li></ul><h3 id="23-怎么唤醒一个阻塞的线程"><a href="#23-怎么唤醒一个阻塞的线程" class="headerlink" title="23. 怎么唤醒一个阻塞的线程"></a>23. 怎么唤醒一个阻塞的线程</h3><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，就无法唤醒。</p><h3 id="24-线程类的构造方法、静态块是被哪个线程调用的"><a href="#24-线程类的构造方法、静态块是被哪个线程调用的" class="headerlink" title="24. 线程类的构造方法、静态块是被哪个线程调用的"></a>24. 线程类的构造方法、静态块是被哪个线程调用的</h3><p>线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。</p><p>如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：</p><ul><li>Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的</li><li>Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的</li></ul><h3 id="25-同步方法和同步块，哪个是更好的选择"><a href="#25-同步方法和同步块，哪个是更好的选择" class="headerlink" title="25. 同步方法和同步块，哪个是更好的选择"></a>25. 同步方法和同步块，哪个是更好的选择</h3><p>同步块是更好的选择，因为它不会锁住整个对象（当然也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。</p><h3 id="26-如何检测死锁？怎么预防死锁？"><a href="#26-如何检测死锁？怎么预防死锁？" class="headerlink" title="26. 如何检测死锁？怎么预防死锁？"></a>26. 如何检测死锁？怎么预防死锁？</h3><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p><ol><li><code>互斥条件</code>:进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源</li><li><code>请求和保持条件</code>:进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放</li><li><code>不可剥夺条件</code>:是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放</li><li><code>环路等待条件</code>:是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-什么是线程&quot;&gt;&lt;a href=&quot;#1-什么是线程&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是线程&quot;&gt;&lt;/a&gt;1. 什么是线程&lt;/h3&gt;&lt;p&gt;线程是操作系统能够执行运算调度的最小单位，被包含在进程中，是进程的实际执行单位。&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Proxy 代理模式</title>
    <link href="http://10buns.com/2018/03/19/Proxy%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://10buns.com/2018/03/19/Proxy 代理模式/</id>
    <published>2018-03-18T16:09:16.000Z</published>
    <updated>2018-05-06T15:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。<br>所谓代理，就是一个人或者一个机构代表另一个人或者另一个机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><p>代理模式和适配器模式的区别：适配器模式的用意是要改变所考虑的对象的接口，而代理模式并不能改变所代理对象的接口。</p><p>代理模式和装饰模式的区别：装饰模式应当为所装饰的对象提供增强功能，而代理模式对对象的使用施加控制，并不提供对象本身的增强功能。</p></blockquote><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="http://olt1b0ecs.bkt.clouddn.com/代理模式-类图.png" alt="代理模式-类图"></p><p>**#### 时序图</p><p><img src="http://olt1b0ecs.bkt.clouddn.com/代理模式-时序图.png" alt="代理模式-时序图"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">doSearch</span><span class="params">(String userId,String searchType)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealSearcher</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSearch</span><span class="params">(String userId, String searchType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserId:"</span> + userId +<span class="string">", type:"</span> + searchType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSearcher searcher;</span><br><span class="line">    <span class="keyword">private</span> UserLogger userLogger;</span><br><span class="line">    <span class="keyword">private</span> AccessValidator accessValidator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxySearcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        searcher = <span class="keyword">new</span> RealSearcher();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSearch</span><span class="params">(String userId, String searchType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkAccess(userId))</span><br><span class="line">        &#123;</span><br><span class="line">            String result = searcher.doSearch(userId,searchType);</span><br><span class="line">            logUsage(userId);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询前的授权操作</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkAccess</span><span class="params">(String userId)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        accessValidator = <span class="keyword">new</span> AccessValidator();</span><br><span class="line">        <span class="keyword">return</span> accessValidator.validateUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询后的日志操作</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logUsage</span><span class="params">(String userId)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        userLogger = <span class="keyword">new</span> UserLogger();</span><br><span class="line">        userLogger.setUserId(userId);</span><br><span class="line">        userLogger.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Searcher searcher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        searcher = <span class="keyword">new</span> ProxySearcher();</span><br><span class="line">        String userId = <span class="string">"admin"</span>;</span><br><span class="line">        String searchType = <span class="string">"SEARCH_BY_USER_ID"</span>;</span><br><span class="line">        String result = searcher.doSearch(userId,searchType);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。&lt;br&gt;所谓代理，就是一个人或者一个机构代表另一个人或者另一个机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作
      
    
    </summary>
    
      <category term="设计模式" scheme="http://10buns.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>常用设计模式</title>
    <link href="http://10buns.com/2018/03/12/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://10buns.com/2018/03/12/常用设计模式/</id>
    <published>2018-03-11T16:09:16.000Z</published>
    <updated>2018-03-21T06:25:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将介绍开发中常用的设计模式<br><a id="more"></a></p></blockquote><h3 id="Proxy-代理模式"><a href="#Proxy-代理模式" class="headerlink" title="Proxy 代理模式"></a>Proxy 代理模式</h3><p><a href="http://10buns.com/2018/03/19/Proxy%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">详细介绍</a></p><h3 id="Factory-工厂模式"><a href="#Factory-工厂模式" class="headerlink" title="Factory 工厂模式"></a>Factory 工厂模式</h3><h3 id="Singleton-单例模式"><a href="#Singleton-单例模式" class="headerlink" title="Singleton 单例模式"></a>Singleton 单例模式</h3><h3 id="Delegate-委派模式"><a href="#Delegate-委派模式" class="headerlink" title="Delegate 委派模式"></a>Delegate 委派模式</h3><h3 id="Strategy-策略模式"><a href="#Strategy-策略模式" class="headerlink" title="Strategy 策略模式"></a>Strategy 策略模式</h3><h3 id="Prototype-原型模式"><a href="#Prototype-原型模式" class="headerlink" title="Prototype 原型模式"></a>Prototype 原型模式</h3><h3 id="Template-模板模式"><a href="#Template-模板模式" class="headerlink" title="Template 模板模式"></a>Template 模板模式</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍开发中常用的设计模式&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://10buns.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring 常见问题</title>
    <link href="http://10buns.com/2018/02/15/Spring-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://10buns.com/2018/02/15/Spring-常见问题/</id>
    <published>2018-02-14T16:15:22.000Z</published>
    <updated>2019-01-23T16:37:25.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IOC和DI是什么"><a href="#IOC和DI是什么" class="headerlink" title="IOC和DI是什么"></a>IOC和DI是什么</h3><p>控制反转是就是应用本身不负责依赖对象的创建和维护,依赖对象的创建及维护是由外部容器负责的,这样控制权就有应用转移到了外部容器,控制权的转移就是控制反转。</p><p>依赖注入是指:在程序运行期间,由外部容器动态地将依赖对象注入到组件中 如：一般，通过构造函数注入或者setter注入。</p><h3 id="Spring-IOC-的理解，其初始化过程"><a href="#Spring-IOC-的理解，其初始化过程" class="headerlink" title="Spring IOC 的理解，其初始化过程"></a>Spring IOC 的理解，其初始化过程</h3><ol><li>Resource资源定位,这个Resouce指的是BeanDefinition的资源定位,这个过程就是容器找数据的过程。</li><li>BeanDefinition的载入过程,这个载入过程是把用户定义好的Bean表示成Ioc容器内部的数据结构，而这个容器内部的数据结构就是BeanDefition。</li><li>向IOC容器注册这些BeanDefinition的过程,这个过程就是将前面的BeanDefition保存到HashMap中的过程。</li></ol><h3 id="BeanFactory-和-FactoryBean的区别"><a href="#BeanFactory-和-FactoryBean的区别" class="headerlink" title="BeanFactory 和 FactoryBean的区别"></a>BeanFactory 和 FactoryBean的区别</h3><ul><li>BeanFactory是个Factory，也就是IOC容器或对象工厂，在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的，提供了实例化对象和拿对象的功能。</li><li>FactoryBean是个Bean，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</li></ul><h3 id="BeanFactory和ApplicationContext的区别"><a href="#BeanFactory和ApplicationContext的区别" class="headerlink" title="BeanFactory和ApplicationContext的区别"></a>BeanFactory和ApplicationContext的区别</h3><ul><li>BeanFactory：在启动的时候不会去实例化Bean，中有从容器中拿Bean的时候才会去实例化；</li><li>ApplicationContext：在启动的时候就把所有的Bean全部实例化了。它还可以为Bean配置lazy-init=true来让Bean延迟实例化；</li></ul><h3 id="ApplicationContext-上下文的生命周期"><a href="#ApplicationContext-上下文的生命周期" class="headerlink" title="ApplicationContext 上下文的生命周期"></a>ApplicationContext 上下文的生命周期</h3><h3 id="Spring-Bean-的生命周期"><a href="#Spring-Bean-的生命周期" class="headerlink" title="Spring Bean 的生命周期"></a>Spring Bean 的生命周期</h3><ol><li>Bean的建立， 由BeanFactory读取Bean定义文件，并生成各个实例;</li><li>Setter注入，执行Bean的属性依赖注入;</li><li>BeanNameAware的setBeanName(), 如果实现该接口，则执行其setBeanName方法;</li><li>BeanFactoryAware的setBeanFactory()，如果实现该接口，则执行其setBeanFactory方法;</li><li>BeanPostProcessor的processBeforeInitialization()，如果有关联的processor，则在Bean初始化之前都会执行这个实例的processBeforeInitialization()方法;</li><li>InitializingBean的afterPropertiesSet()，如果实现了该接口，则执行其afterPropertiesSet()方法;</li><li>Bean定义文件中定义init-method;</li><li>BeanPostProcessors的processAfterInitialization()，如果有关联的processor，则在Bean初始化之前都会执行这个实例的processAfterInitialization()方法;</li><li>DisposableBean的destroy()，在容器关闭时，如果Bean类实现了该接口，则执行它的destroy()方法;</li><li>Bean定义文件中定义destroy-method，在容器关闭时，可以在Bean定义文件中使用“destory-method”定义的方法;</li></ol><h3 id="Spring-AOP的实现原理"><a href="#Spring-AOP的实现原理" class="headerlink" title="Spring AOP的实现原理"></a>Spring AOP的实现原理</h3><p>使用动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p><p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p><p>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。</p><h3 id="Spring-是如何管理事务的，事务管理机制"><a href="#Spring-是如何管理事务的，事务管理机制" class="headerlink" title="Spring 是如何管理事务的，事务管理机制"></a>Spring 是如何管理事务的，事务管理机制</h3><p>Spring事务管理主要包括3个接口，Spring的事务主要是由它们(PlatformTransactionManager，TransactionDefinition，TransactionStatus)三个共同完成的。</p><ul><li><p>PlatformTransactionManager：事务管理器–主要用于平台相关事务的管理</p><p> 主要有三个方法：</p><ol><li>commit 事务提交；</li><li>rollback 事务回滚；</li><li>getTransaction 获取事务状态。</li></ol></li><li><p>TransactionDefinition：事务定义信息–用来定义事务相关的属性，给事务管理器PlatformTransactionManager使用</p><p>主要有四个主要方法：</p><ol><li>getIsolationLevel：获取隔离级别；</li><li>getPropagationBehavior：获取传播行为；</li><li>getTimeout：获取超时时间；</li><li>isReadOnly：是否只读（保存、更新、删除时属性变为false–可读写，查询时为true–只读）</li></ol><p>事务管理器能够根据这个返回值进行优化，这些事务的配置信息，都可以通过配置文件进行配置。</p></li><li><p>TransactionStatus：事务具体运行状态–事务管理过程中，每个时间点事务的状态信息。</p><p>  主要有三个方法：</p><ol><li>hasSavepoint()：返回这个事务内部是否包含一个保存点，</li><li>isCompleted()：返回该事务是否已完成，也就是说，是否已经提交或回滚</li><li>isNewTransaction()：判断当前事务是否是一个新事务</li></ol></li></ul><p>事务的四个特性: <code>原子性</code> <code>一致性</code> <code>隔离性</code> <code>持久性</code></p><p>事务的隔离级别:</p><pre><code>1. ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.另外四个与JDBC的隔离级别相对应2. ISOLATIONREADUNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。3. ISOLATIONREADCOMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据4. ISOLATIONREPEATABLEREAD： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。5. ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。</code></pre><h3 id="Spring-的不同事务传播行为有哪些，干什么用的"><a href="#Spring-的不同事务传播行为有哪些，干什么用的" class="headerlink" title="Spring 的不同事务传播行为有哪些，干什么用的"></a>Spring 的不同事务传播行为有哪些，干什么用的</h3><ol><li>PROPAGATION_REQUIRED: 如果存在一个事务，则支持当前事务，如果没有事务则开启。</li><li>PROPAGATIONREQUIRESNEW: 总是开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起。</li><li>PROPAGATION_SUPPORTS: 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行</li><li>PROPAGATION_MANDATORY: 如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。</li><li>PROPAGATIONNOTSUPPORTED: 总是非事务地执行，并挂起任何存在的事务。</li><li>PROPAGATION_NEVER: 总是非事务地执行，如果存在一个活动事务，则抛出异常</li><li>PROPAGATIONNESTED：如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按TransactionDefinition.PROPAGATIONREQUIRED 属性执行</li></ol><h3 id="Spring-中用到了那些设计模式"><a href="#Spring-中用到了那些设计模式" class="headerlink" title="Spring 中用到了那些设计模式"></a>Spring 中用到了那些设计模式</h3><ul><li>代理模式: 在AOP和remoting中被用的比较多。</li><li>单例模式: 在spring配置文件中定义的bean默认为单例模式。</li><li>模板方法: 用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li><li>工厂模式: BeanFactory用来创建对象的实例。</li><li>适配器: spring aop</li><li>装饰器: spring data hashmapper</li><li>观察者: spring 时间驱动模型</li><li>回调: Spring ResourceLoaderAware回调接口</li></ul><h3 id="Spring-MVC-的工作原理"><a href="#Spring-MVC-的工作原理" class="headerlink" title="Spring MVC 的工作原理"></a>Spring MVC 的工作原理</h3><ol><li>用户发起请求到前端控制器（DispatcherServlet）</li><li>前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handler）：通过xml配置或者注解进行查找</li><li>找到处理器映射器（HandlerMappering）向前端控制器返回执行链（HandlerExecutionChain）</li><li>前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</li><li>处理器适配器去执行Handler</li><li>Handler执行完给处理器适配器返回ModelAndView</li><li>处理器适配器向前端控制器返回ModelAndView</li><li>前端控制器请求视图解析器（ViewResolver）去进行视图解析</li><li>视图解析器像前端控制器返回View</li><li>前端控制器对视图进行渲染</li><li>前端控制器向用户响应结果</li></ol><h3 id="Spring如何解决循环依赖"><a href="#Spring如何解决循环依赖" class="headerlink" title="Spring如何解决循环依赖"></a>Spring如何解决循环依赖</h3><h3 id="Spring-如何保证-Controller-并发的安全"><a href="#Spring-如何保证-Controller-并发的安全" class="headerlink" title="Spring 如何保证 Controller 并发的安全"></a>Spring 如何保证 Controller 并发的安全</h3><p>Controller对象是单例的，那么如果不小心在类中定义了类变量，那么这个类变量是被所有请求共享的，这可能会造成多个请求修改该变量的值，出现与预期结果不符合的异常。<br>可以使用ThreadLocal来保存类变量，将类变量保存在线程的变量域中，让不同的请求隔离开来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;IOC和DI是什么&quot;&gt;&lt;a href=&quot;#IOC和DI是什么&quot; class=&quot;headerlink&quot; title=&quot;IOC和DI是什么&quot;&gt;&lt;/a&gt;IOC和DI是什么&lt;/h3&gt;&lt;p&gt;控制反转是就是应用本身不负责依赖对象的创建和维护,依赖对象的创建及维护是由外部容器负
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CentOS 安装 JDK</title>
    <link href="http://10buns.com/2018/02/08/CentOS-%E5%AE%89%E8%A3%85-JDK/"/>
    <id>http://10buns.com/2018/02/08/CentOS-安装-JDK/</id>
    <published>2018-02-08T14:17:31.000Z</published>
    <updated>2019-01-22T14:51:09.668Z</updated>
    
    <content type="html"><![CDATA[<ul><li>上传 jdk 压缩包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/Downloads/jdk-8u191-linux-x64.tar.gz root@ip:/var/local</span><br></pre></td></tr></table></figure><ul><li>服务器操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf jdk-8u152-linux-x64.tar.gz </span><br><span class="line"># 在/etc/profile.d/路径下新建一个文件，名为java.sh</span><br><span class="line">$ touch java.sh </span><br><span class="line">$ vim java.sh</span><br></pre></td></tr></table></figure><blockquote><p>内容如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_102/</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export PATH JAVA_HOME</span><br><span class="line">export CLASSPATH=.</span><br></pre></td></tr></table></figure><ul><li>保存并刷新</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x /etc/profile.d/java.sh</span><br><span class="line">$ source /etc/profile.d/java.sh</span><br><span class="line">$ java -version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;上传 jdk 压缩包&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
