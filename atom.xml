<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>10buns</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://10buns.cn/"/>
  <updated>2020-09-25T09:50:25.490Z</updated>
  <id>http://10buns.cn/</id>
  
  <author>
    <name>10buns</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[study golang] 21.mutex</title>
    <link href="http://10buns.cn/2020/09/25/study-golang-21-mutex/"/>
    <id>http://10buns.cn/2020/09/25/study-golang-21-mutex/</id>
    <published>2020-09-25T08:34:46.000Z</published>
    <updated>2020-09-25T09:50:25.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><p>Mutex 用于提供一种加锁机制（Locking Mechanism），可确保在某时刻只有一个协程在临界区运行，以防止出现竞态条件。</p><p>Mutex 可以在 sync 包内找到。Mutex 定义了两个方法：Lock 和 Unlock。所有在 Lock 和 Unlock 之间的代码，都只能由一个 Go 协程执行，于是就可以避免竞态条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mutex.Lock()  </span><br><span class="line">x = x + 1  </span><br><span class="line">mutex.Unlock()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mutex&quot;&gt;&lt;a href=&quot;#Mutex&quot; class=&quot;headerlink&quot; title=&quot;Mutex&quot;&gt;&lt;/a&gt;Mutex&lt;/h2&gt;&lt;p&gt;Mutex 用于提供一种加锁机制（Locking Mechanism），可确保在某时刻只有一个协程在临界区运行，以防
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 20.select</title>
    <link href="http://10buns.cn/2020/09/25/study-golang-20-select/"/>
    <id>http://10buns.cn/2020/09/25/study-golang-20-select/</id>
    <published>2020-09-25T08:34:35.000Z</published>
    <updated>2020-09-25T09:49:53.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 19.并发</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-19-%E5%B9%B6%E5%8F%91/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-19-并发/</id>
    <published>2020-09-24T06:38:13.000Z</published>
    <updated>2020-09-25T08:29:22.905Z</updated>
    
    <content type="html"><![CDATA[<p><code>并发</code>是指立即处理多个任务的能力。<code>并行</code>是指同时处理多个任务。<br>Go 编程语言原生支持并发。Go 使用 <code>Go 协程（Goroutine）</code> 和<code>信道（Channel）</code>来处理并发。</p><h2 id="Go-协程是什么？"><a href="#Go-协程是什么？" class="headerlink" title="Go 协程是什么？"></a>Go 协程是什么？</h2><p><code>Go 协程</code>是与其他函数或方法一起并发运行的函数或方法。Go 协程可以看作是轻量级线程。与线程相比，创建一个 Go 协程的成本很小。因此在 Go 应用中，常常会看到有数以千计的 Go 协程并发地运行。</p><p>Go 协程相比于线程的优势</p><ul><li>相比线程而言，Go 协程的成本极低。堆栈大小只有若干 kb，并且可以根据应用的需求进行增减。而线程必须指定堆栈的大小，其堆栈是固定不变的。</li><li>Go 协程会复用（Multiplex）数量更少的 OS 线程。即使程序有数以千计的 Go 协程，也可能只有一个线程。如果该线程中的某一 Go 协程发生了阻塞（比如说等待用户输入），那么系统会再创建一个 OS 线程，并把其余 Go 协程都移动到这个新的 OS 线程。所有这一切都在运行时进行，我们没有直接面临这些复杂的细节，而是有一个简洁的 API 来处理并发。</li><li>Go 协程使用信道（Channel）来进行通信。信道用于防止多个协程访问共享内存时发生竞态条件（Race Condition）。信道可以看作是 Go 协程之间通信的管道。</li></ul><p><strong>调用函数或者方法时，在前面加上关键字 <code>go</code>，可以让一个新的 Go 协程并发地运行。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func hello()&#123;</span><br><span class="line">fmt.Println(&quot;hello gorutine !&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">go hello()</span><br><span class="line">time.Sleep(1 * time.Second) // 等待协程处理</span><br><span class="line">fmt.Println(&quot;main function&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动一个新的协程时，协程的调用会立即返回。与函数不同，程序控制不会去等待 Go 协程执行完毕。在调用 Go 协程之后，程序控制会立即返回到代码的下一行，忽略该协程的任何返回值。</li><li>如果希望运行其他 Go 协程，Go 主协程必须继续运行着。如果 Go 主协程终止，则程序终止，于是其他 Go 协程也不会继续运行。</li></ul><h2 id="信道是什么？"><a href="#信道是什么？" class="headerlink" title="信道是什么？"></a>信道是什么？</h2><p>信道可以想像成 Go 协程之间通信的管道。如同管道中的水会从一端流到另一端，通过使用信道，数据也可以从一端发送，在另一端接收。</p><p>所有信道都关联了一个类型。信道只能运输这种类型的数据，而运输其他类型的数据都是非法的。</p><p><strong>chan T 表示 T 类型的信道。</strong></p><p>信道的零值为 nil。信道的零值没有什么用，应该像对 map 和切片所做的那样，用 make 来定义信道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a chan int</span><br><span class="line">a := make(chan int)</span><br></pre></td></tr></table></figure><h4 id="信道发送和接收"><a href="#信道发送和接收" class="headerlink" title="信道发送和接收"></a>信道发送和接收</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data := &lt;- a // 读取信道 a  </span><br><span class="line">a &lt;- data // 写入信道 a</span><br></pre></td></tr></table></figure><p>当把数据发送到信道时，程序控制会在发送数据的语句处<code>发生阻塞</code>，直到有其它 Go 协程从信道读取到数据，才会解除阻塞。与此类似，当读取信道的数据时，如果没有其它的协程把数据写入到这个信道，那么读取过程就会一直阻塞着。</p><p>信道的这种特性能够帮助 Go 协程之间进行高效的通信，不需要用到其他编程语言常见的显式锁或条件变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func hello(done chan bool)&#123;</span><br><span class="line">fmt.Println(&quot;hello goroutine!&quot;)</span><br><span class="line">done &lt;- true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">done := make(chan  bool)</span><br><span class="line">go hello(done)</span><br><span class="line">&lt;-done</span><br><span class="line">fmt.Println(&quot;main function&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据发送方可以关闭信道，通知接收方这个信道不再有数据发送过来。</strong></p><p>当从信道接收数据时，接收方可以多用一个变量来检查信道是否已经关闭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v, ok := &lt;- ch</span><br></pre></td></tr></table></figure><p>上面的语句里，如果成功接收信道所发送的数据，那么 ok 等于 true。而如果 ok 等于 false，说明我们试图读取一个关闭的通道。从关闭的信道读取到的值会是该信道类型的零值。例如，当信道是一个 int 类型的信道时，那么从关闭的信道读取的值将会是 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">func digits(number int, dchnl chan  int)&#123;</span><br><span class="line">for number != 0&#123;</span><br><span class="line">digits := number%10</span><br><span class="line">dchnl &lt;- digits</span><br><span class="line">number /= 10</span><br><span class="line">&#125;</span><br><span class="line">close(dchnl)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func calcSquares(num int, squareop chan int)  &#123;</span><br><span class="line">sum := 0</span><br><span class="line">dch := make(chan int)</span><br><span class="line">go digits(num, dch)</span><br><span class="line">for digit := range dch&#123;</span><br><span class="line">sum += digit * digit</span><br><span class="line">&#125;</span><br><span class="line">squareop &lt;- sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func calcCubes(num int, cubeop chan int)  &#123;</span><br><span class="line">sum := 0</span><br><span class="line">dch := make(chan int)</span><br><span class="line">go digits(num, dch)</span><br><span class="line">for digit := range dch &#123;</span><br><span class="line">sum += digit * digit * digit</span><br><span class="line">&#125;</span><br><span class="line">cubeop &lt;- sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">num := 345</span><br><span class="line">sqrch := make(chan int)</span><br><span class="line">cubech := make(chan int)</span><br><span class="line">go calcSquares(num, sqrch)</span><br><span class="line">go calcCubes(num, cubech)</span><br><span class="line">squares, cubes := &lt;-sqrch, &lt;-cubech</span><br><span class="line">fmt.Printf(&quot;%d, %d&quot;, squares, cubes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓冲信道"><a href="#缓冲信道" class="headerlink" title="缓冲信道"></a>缓冲信道</h4><p>还可以创建一个有缓冲（Buffer）的信道。只在缓冲已满的情况，才会阻塞向缓冲信道（Buffered Channel）发送数据。同样，只有在缓冲为空的时候，才会阻塞从缓冲信道接收数据。</p><p>通过向 make 函数再传递一个表示容量的参数（指定缓冲的大小），可以创建缓冲信道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := make(chan type, capacity)</span><br></pre></td></tr></table></figure><p>要让一个信道有缓冲，上面语法中的 capacity 应该大于 0。无缓冲信道的容量默认为 0。</p><h4 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h4><p><code>WaitGroup</code> 用于等待一批 Go 协程执行结束。程序控制会一直阻塞，直到这些协程全部执行完毕。假设我们有 3 个并发执行的 Go 协程（由 Go 主协程生成）。Go 主协程需要等待这 3 个协程执行结束后，才会终止。这就可以用 WaitGroup 来实现。</p><p><strong>工作池的核心功能如下：</strong></p><ul><li>创建一个 Go 协程池，监听一个等待作业分配的输入型缓冲信道。</li><li>将作业添加到该输入型缓冲信道中。</li><li>作业完成后，再将结果写入一个输出型缓冲信道。</li><li>从输出型缓冲信道读取并打印结果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">type Job struct &#123;</span><br><span class="line">id int</span><br><span class="line">randomno int //计算每位数字和</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Result struct &#123;</span><br><span class="line">job Job</span><br><span class="line">sumofdigits int //计算的结果</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var jobs = make(chan Job, 10)</span><br><span class="line">var results = make(chan Result, 10)</span><br><span class="line"></span><br><span class="line">func digits(number int)int&#123;</span><br><span class="line">sum := 0</span><br><span class="line">no := number</span><br><span class="line">for no != 0&#123;</span><br><span class="line">digit := no%10</span><br><span class="line">sum += digit</span><br><span class="line">no /= 10</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(2 * time.Second)</span><br><span class="line">return sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建工作协程</span><br><span class="line">func worker(wg *sync.WaitGroup)&#123;</span><br><span class="line">for job := range jobs&#123;</span><br><span class="line">output := Result&#123;job, digits(job.randomno)&#125;</span><br><span class="line">results &lt;- output</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建工作协程池</span><br><span class="line">func createWorkerPool(noOfWorkers int)&#123;</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">for i:=0; i&lt;noOfWorkers; i++ &#123;</span><br><span class="line">wg.Add(1)</span><br><span class="line">go worker(&amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">close(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//分配任务</span><br><span class="line">func allocate(noOfJobs int)  &#123;</span><br><span class="line">for i:=0; i&lt;noOfJobs; i++&#123;</span><br><span class="line">randomno := rand.Intn(999)</span><br><span class="line">job := Job&#123;i, randomno&#125;</span><br><span class="line">jobs &lt;- job</span><br><span class="line">&#125;</span><br><span class="line">close(jobs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//打印结果</span><br><span class="line">func result(done chan bool)&#123;</span><br><span class="line">for result := range results&#123;</span><br><span class="line">fmt.Printf(&quot;Job id %d, input random no %d , sum of digits %d\n&quot;,</span><br><span class="line">result.job.id, result.job.randomno, result.sumofdigits)</span><br><span class="line">&#125;</span><br><span class="line">done &lt;- true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">startTime := time.Now()</span><br><span class="line">noOfJobs := 100</span><br><span class="line">go allocate(noOfJobs)</span><br><span class="line">done := make(chan bool)</span><br><span class="line">go result(done)</span><br><span class="line">noOfWorkers := 20</span><br><span class="line">createWorkerPool(noOfWorkers)</span><br><span class="line">&lt;-done</span><br><span class="line">endTime := time.Now()</span><br><span class="line">diff := endTime.Sub(startTime)</span><br><span class="line">fmt.Println(&quot;total time taken &quot;, diff.Seconds(), &quot;seconds&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;并发&lt;/code&gt;是指立即处理多个任务的能力。&lt;code&gt;并行&lt;/code&gt;是指同时处理多个任务。&lt;br&gt;Go 编程语言原生支持并发。Go 使用 &lt;code&gt;Go 协程（Goroutine）&lt;/code&gt; 和&lt;code&gt;信道（Channel）&lt;/code&gt;来处理
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 18.接口</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-18-%E6%8E%A5%E5%8F%A3/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-18-接口/</id>
    <published>2020-09-24T06:20:39.000Z</published>
    <updated>2020-09-24T06:36:31.064Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象的领域里，接口一般这样定义：接口定义一个对象的行为。接口只指定了对象应该做什么，至于如何实现这个行为（即实现细节），则由对象本身去确定。</p><p>在 Go 语言中，接口就是<strong>方法签名（Method Signature）</strong>的集合。当一个类型定义了接口中的所有方法，我们称它实现了该接口。这与面向对象编程（OOP）的说法很类似。<strong>接口指定了一个类型应该具有的方法，并由该类型决定如何实现这些方法</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">type MyString string</span><br><span class="line"></span><br><span class="line">type VowelsFinder interface &#123;</span><br><span class="line">FinderVowels() []rune</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (ms MyString)FinderVowels()[]rune  &#123;</span><br><span class="line">var vowels []rune</span><br><span class="line">for _, rune := range ms  &#123;</span><br><span class="line">if rune == &apos;a&apos; || rune == &apos;e&apos; || rune == &apos;i&apos;</span><br><span class="line"> || rune == &apos;o&apos; || rune == &apos;u&apos; &#123;</span><br><span class="line">vowels = append(vowels, rune)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return vowels</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">name := MyString(&quot;Sam Anderson&quot;)</span><br><span class="line">var v VowelsFinder</span><br><span class="line">v = name</span><br><span class="line">fmt.Printf(&quot;vowels are %c&quot;, v.FinderVowels())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>和其他一些语言要求一个类使用 implement 关键字，来显式地声明该类实现了接口。而在 Go 中，并不需要这样。如果一个类型包含了接口中声明的所有方法，那么它就隐式地实现了 Go 接口</strong></p><h4 id="接口的内部表示"><a href="#接口的内部表示" class="headerlink" title="接口的内部表示"></a>接口的内部表示</h4><p>我们可以把接口看作内部的一个元组 (type, value)。 type 是接口底层的具体类型（Concrete Type），而 value 是具体类型的值。</p><p><strong> 如果一个类型实现了接口，那么该类型与其实现的接口就可以互相比较。</strong></p><p><strong>对于使用指针接受者的方法，用一个指针或者一个可取得地址的值来调用都是合法的。但接口中存储的具体值（Concrete Value）并不能取到地址</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在面向对象的领域里，接口一般这样定义：接口定义一个对象的行为。接口只指定了对象应该做什么，至于如何实现这个行为（即实现细节），则由对象本身去确定。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，接口就是&lt;strong&gt;方法签名（Method Signature）&lt;/strong&gt;的集合。
      
    
    </summary>
    
    
      <category term="tag" scheme="http://10buns.cn/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 17.方法</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-17-%E6%96%B9%E6%B3%95/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-17-方法/</id>
    <published>2020-09-24T05:58:28.000Z</published>
    <updated>2020-09-24T06:17:52.099Z</updated>
    
    <content type="html"><![CDATA[<p>方法其实就是一个函数，在 func 这个关键字和方法名中间加入了一个特殊的接收器类型。接收器可以是结构体类型或者是非结构体类型。接收器是可以在方法的内部访问的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (t Type) methodName(parameter list) &#123;&#125;</span><br></pre></td></tr></table></figure><p>用例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">type Employee struct &#123;</span><br><span class="line">name string</span><br><span class="line">salary int</span><br><span class="line">currency string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e Employee) displaySalary()  &#123;</span><br><span class="line">fmt.Printf(&quot;Salary of %s is %d%s&quot;, e.name, e.salary,e.currency)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line"> em1 := Employee&#123;</span><br><span class="line"> name:     &quot;Jack&quot;,</span><br><span class="line"> salary:   110,</span><br><span class="line"> currency: &quot;¥&quot;,</span><br><span class="line"> &#125;</span><br><span class="line"> em1.displaySalary()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了函数，还需要方法的原因如下:</p><ul><li><p>Go 不是纯粹的面向对象编程语言，而且Go不支持类。因此，基于类型的方法是一种实现和类相似行为的途径。</p></li><li><p>相同的名字的方法可以定义在不同的类型上，而相同名字的函数是不被允许的。</p></li></ul><h4 id="指针接收器与值接收器"><a href="#指针接收器与值接收器" class="headerlink" title="指针接收器与值接收器"></a>指针接收器与值接收器</h4><p>到目前为止，我们只看到了使用值接收器的方法。还可以创建使用指针接收器的方法。值接收器和指针接收器之间的区别在于，在指针接收器的方法内部的改变对于调用者是可见的，然而值接收器的情况不是这样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func (e Employee) changeName(newName string)  &#123;</span><br><span class="line">e.name = newName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *Employee) changeAge(newSalary int)&#123;</span><br><span class="line">e.salary = newSalary</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">em1.changeName(&quot;Mike&quot;)</span><br><span class="line">fmt.Println(em1) //&#123;Jack 110 ¥&#125;</span><br><span class="line">(&amp;em1).changeAge(200)</span><br><span class="line">fmt.Println(em1) //&#123;Jack 200 ¥&#125;</span><br></pre></td></tr></table></figure><p>指针接收器可以用在如下场景:</p><ul><li>对方法内部的接收器所做的改变应该对调用者可见时</li><li>当拷贝一个结构体的代价过于昂贵时。考虑下一个结构体有很多的字段。在方法内使用这个结构体做为值接收器需要拷贝整个结构体，这是很昂贵的。在这种情况下使用指针接收器，结构体不会被拷贝，只会传递一个指针到方法内部使用。</li></ul><h4 id="在方法中使用值接收器-与-在函数中使用值参数"><a href="#在方法中使用值接收器-与-在函数中使用值参数" class="headerlink" title="在方法中使用值接收器 与 在函数中使用值参数"></a>在方法中使用值接收器 与 在函数中使用值参数</h4><ul><li><p>当一个函数有一个值参数，它只能接受一个值参数。</p></li><li><p>当一个方法有一个值接收器，它可以接受值接收器和指针接收器。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;方法其实就是一个函数，在 func 这个关键字和方法名中间加入了一个特殊的接收器类型。接收器可以是结构体类型或者是非结构体类型。接收器是可以在方法的内部访问的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 16.结构体</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-16-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-16-结构体/</id>
    <published>2020-09-24T02:56:03.000Z</published>
    <updated>2020-09-24T05:56:30.177Z</updated>
    
    <content type="html"><![CDATA[<p>结构体是用户定义的类型，表示若干个字段（Field）的集合。有时应该把数据整合在一起，而不是让这些数据没有联系。这种情况下可以使用结构体。</p><p>结构体是值类型。如果它的每一个字段都是可比较的，则该结构体也是可比较的。如果两个结构体变量的对应字段相等，则这两个变量也是相等的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Employee struct &#123;</span><br><span class="line">    firstName string</span><br><span class="line">    lastName  string</span><br><span class="line">    age       int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;结构体是用户定义的类型，表示若干个字段（Field）的集合。有时应该把数据整合在一起，而不是让这些数据没有联系。这种情况下可以使用结构体。&lt;/p&gt;
&lt;p&gt;结构体是值类型。如果它的每一个字段都是可比较的，则该结构体也是可比较的。如果两个结构体变量的对应字段相等，则这两个变量也
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 15.指针</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-15-%E6%8C%87%E9%92%88/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-15-指针/</id>
    <published>2020-09-24T02:41:26.000Z</published>
    <updated>2020-09-24T02:45:56.729Z</updated>
    
    <content type="html"><![CDATA[<p>指针是一种存储变量内存地址（Memory Address）的变量。<br>其变量的类型为 *T，该指针指向一个 T 类型的变量。<br>&amp; 操作符用于获取变量的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b := 100</span><br><span class="line">var a *int = &amp;b</span><br><span class="line">fmt.Printf(&quot;type of a is %T&quot;, a)</span><br><span class="line">fmt.Println(&quot; address is&quot;, a)</span><br></pre></td></tr></table></figure><h4 id="指针的解引用"><a href="#指针的解引用" class="headerlink" title="指针的解引用"></a>指针的解引用</h4><p>指针的解引用可以获取指针所指向的变量的值。将 a 解引用的语法是 *a。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c := &amp;b</span><br><span class="line">fmt.Println(&quot;value of b is &quot;, *c)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;指针是一种存储变量内存地址（Memory Address）的变量。&lt;br&gt;其变量的类型为 *T，该指针指向一个 T 类型的变量。&lt;br&gt;&amp;amp; 操作符用于获取变量的地址&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 14.字符串</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-14-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-14-字符串/</id>
    <published>2020-09-24T02:19:49.000Z</published>
    <updated>2020-09-24T02:33:22.793Z</updated>
    
    <content type="html"><![CDATA[<p>Go 语言中的字符串是一个字节切片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func printBytes(s string)&#123; //打印字节</span><br><span class="line">for i:=0; i &lt; len(s); i++&#123;</span><br><span class="line">fmt.Printf(&quot;%x &quot;,s[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func printChars(s string)  &#123; //打印字符</span><br><span class="line">for i:=0; i&lt;len(s); i++ &#123;</span><br><span class="line">fmt.Printf(&quot;%c &quot;, s[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">s := &quot;hello world&quot;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">printBytes(s)</span><br><span class="line">fmt.Printf(&quot;\n&quot;)</span><br><span class="line">printChars(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rune"><a href="#rune" class="headerlink" title="rune"></a>rune</h4><p>rune 是 Go 语言的内建类型，它也是 int32 的别称。在 Go 语言中，rune 表示一个代码点。代码点无论占用多少个字节，都可以用一个 rune 来表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func printChars(s string)  &#123;</span><br><span class="line">runes := []rune(s)</span><br><span class="line">for i:=0; i&lt;len(runes); i++ &#123;</span><br><span class="line">fmt.Printf(&quot;%c &quot;, runes[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h4><p>utf8 package 包中的 <code>func RuneCountInString(s string) (n int)</code>方法用来获取字符串的长度。这个方法传入一个字符串参数然后返回字符串中的 rune 的数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(s, &quot; length is &quot;, utf8.RuneCountInString(s))</span><br></pre></td></tr></table></figure><h4 id="字符串不可变性"><a href="#字符串不可变性" class="headerlink" title="字符串不可变性"></a>字符串不可变性</h4><p>Go 中的字符串是不可变的。一旦一个字符串被创建，那么它将无法被修改。为了修改字符串，可以把字符串转化为一个 rune 切片。然后这个切片可以进行任何想要的改变，然后再转化为一个字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func mutate(s []rune)string&#123;</span><br><span class="line">s[0] = &apos;x&apos;</span><br><span class="line">return string(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(mutate([]rune(s)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Go 语言中的字符串是一个字节切片。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 13.Maps</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-13-Maps/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-13-Maps/</id>
    <published>2020-09-24T02:08:14.000Z</published>
    <updated>2020-09-24T02:17:51.231Z</updated>
    
    <content type="html"><![CDATA[<p>map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。</p><p>通过向 make 函数传入键和值的类型，可以创建 map。make(map[type of key]type of value) 是创建 map 的语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">persons := make(map[string]int)</span><br><span class="line">persons[&quot;jake&quot;] = 100 //添加元素</span><br><span class="line">persons[&quot;aka&quot;] = 200</span><br><span class="line">persons[&quot;billy&quot;] = 300</span><br><span class="line">fmt.Println(persons)</span><br></pre></td></tr></table></figure><p>也可以直接初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scores := map[string]int&#123;</span><br><span class="line">&quot;rma&quot;:100,</span><br><span class="line">&quot;bc&quot;:200,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(scores)</span><br></pre></td></tr></table></figure><h4 id="获取-map-中的元素"><a href="#获取-map-中的元素" class="headerlink" title="获取 map 中的元素"></a>获取 map 中的元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key := &quot;bc&quot;</span><br><span class="line">fmt.Println(scores[key])</span><br></pre></td></tr></table></figure><h4 id="删除-map-中的元素"><a href="#删除-map-中的元素" class="headerlink" title="删除 map 中的元素"></a>删除 map 中的元素</h4><p>删除 map 中 key 的语法是 delete(map, key)。这个函数没有返回值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete(scores, &quot;bc&quot;)</span><br><span class="line">fmt.Println(scores)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。&lt;/p&gt;
&lt;p&gt;通过向 make 函数传入键和值的类型，可以创建 map。make(map[type of key]type of value) 是创建 map 的语法。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 12.可变参数函数</title>
    <link href="http://10buns.cn/2020/09/24/study-golang-12-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0/"/>
    <id>http://10buns.cn/2020/09/24/study-golang-12-可变参数函数/</id>
    <published>2020-09-24T02:06:03.000Z</published>
    <updated>2020-09-24T02:34:29.677Z</updated>
    
    <content type="html"><![CDATA[<p>可变参数函数的工作原理是把可变参数转换为一个新的切片。</p><p>有一个可以直接将切片传入可变参数函数的语法糖，可以在在切片后加上 <code>...</code>后缀。如果这样做，切片将直接传入函数，不再创建新的切片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可变参数函数的工作原理是把可变参数转换为一个新的切片。&lt;/p&gt;
&lt;p&gt;有一个可以直接将切片传入可变参数函数的语法糖，可以在在切片后加上 &lt;code&gt;...&lt;/code&gt;后缀。如果这样做，切片将直接传入函数，不再创建新的切片。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 11.数组和切片</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-11-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-11-数组和切片/</id>
    <published>2020-09-23T10:11:04.000Z</published>
    <updated>2020-09-24T01:59:10.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是同一类型元素的集合。例如，整数集合 1~10 形成一个数组。Go 语言中不允许混合不同类型的元素，例如包含字符串和整数的数组。</p><p>一个数组的表示形式为 [n]T。n 表示数组中元素的数量，T 代表每个元素的类型。元素的数量 n 也是该类型的一部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a [5]int</span><br><span class="line">a[0] = 1</span><br><span class="line">a[1] = 2</span><br><span class="line">a[2] = 3</span><br><span class="line">a[3] = 4</span><br><span class="line">a[4] = 5</span><br><span class="line">fmt.Println(a)</span><br></pre></td></tr></table></figure><p>也可以简要声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b := [2]int&#123;1,2&#125;</span><br><span class="line">fmt.Println(b)</span><br></pre></td></tr></table></figure><blockquote><ol><li>数组的大小是类型的一部分, 因此 [5]int 与 [2]int 是不同的类型</li><li>Go 中的数组是<code>值类型</code>而不是<code>引用类型</code>。当数组赋值给一个新的变量时，该变量会得到一个原始数组的一个副本，对新变量进行更改，不会影响原始数组。</li></ol></blockquote><h4 id="range方式遍历数组"><a href="#range方式遍历数组" class="headerlink" title="range方式遍历数组"></a>range方式遍历数组</h4><p>过使用 for 循环的 range 方法来遍历数组，range 返回索引和该索引处的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i, v := range a&#123;</span><br><span class="line">fmt.Printf(&quot;%d th element of a is %d\n&quot;, i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>由数组建立的一种方便、灵活且功能强大的包装（Wrapper）。切片本身不拥有任何数据。它们只是对现有数组的引用。</p><p>使用语法 a[start:end] 创建一个从 a 数组索引 start 开始到 end - 1 结束的切片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a := [5]int&#123;1,2,3,4,5&#125;</span><br><span class="line">var b []int = a[0:3]</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line">c := []int&#123;1,2,3,4,5&#125;</span><br><span class="line">fmt.Println(c)</span><br></pre></td></tr></table></figure><p>切片自己不拥有任何数据。它只是底层数组的一种表示。对切片所做的任何修改都会反映在底层数组中。</p><p>切片的长度是切片中的元素数。切片的容量是从创建切片索引开始的底层数组中元素数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruitArray := [...]string&#123;&quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;,</span><br><span class="line"> &quot;mango&quot;, &quot;water melon&quot;, &quot;pine apple&quot;, &quot;chikoo&quot;&#125;</span><br><span class="line">fruitSlice := fruitArray[1:3]</span><br><span class="line">fmt.Printf(&quot;%d %d\n&quot;, len(fruitSlice), cap(fruitSlice)) //2,6</span><br></pre></td></tr></table></figure><h4 id="使用-make-创建一个切片"><a href="#使用-make-创建一个切片" class="headerlink" title="使用 make 创建一个切片"></a>使用 make 创建一个切片</h4><p>func make（[]T，len，cap）[]T 通过传递类型，长度和容量来创建切片。容量是可选参数, 默认值为切片长度。make 函数创建一个数组，并返回引用该数组的切片。使用 make 创建切片时默认情况下这些值为零。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i := make([]int, 5, 5)</span><br><span class="line">fmt.Println(i)</span><br></pre></td></tr></table></figure><h4 id="追加切片元素"><a href="#追加切片元素" class="headerlink" title="追加切片元素"></a>追加切片元素</h4><p>切片是动态的，使用 append 可以将新元素追加到切片上。append 函数的定义是 </p><p><code>func append（s[]T，x ... T）[]T</code></p><p><code>x ... T</code>在函数定义中表示该函数接受参数 x 的个数是可变的。这些类型的函数被称为可变函数。</p><p>切片类型的零值为 nil。一个 nil 切片的长度和容量为 0。可以使用 append 函数将值追加到 nil 切片。</p><h4 id="切片的函数传递"><a href="#切片的函数传递" class="headerlink" title="切片的函数传递"></a>切片的函数传递</h4><p>片在内部可由一个结构体类型表示。这是它的表现形式，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type slice struct &#123;  </span><br><span class="line">    Length        int</span><br><span class="line">    Capacity      int</span><br><span class="line">    ZerothElement *byte</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片包含长度、容量和指向数组第零个元素的指针。当切片传递给函数时，即使它通过值传递，指针变量也将引用相同的底层数组。因此，当切片作为参数传递给函数时，函数内所做的更改也会在函数外可见。让我们写一个程序来检查这点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;数组是同一类型元素的集合。例如，整数集合 1~10 形成一个数组。Go 语言中不允许混合不同类型的元素，例如包含字符串和整数的数组。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 10.switch语句</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-10-switch%E8%AF%AD%E5%8F%A5/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-10-switch语句/</id>
    <published>2020-09-23T09:52:45.000Z</published>
    <updated>2020-09-23T10:10:40.383Z</updated>
    
    <content type="html"><![CDATA[<p>switch 是一个条件语句，用于将表达式的值与可能匹配的选项列表进行比较，并根据匹配情况执行相应的代码块。它可以被认为是替代多个 if else 子句的常用方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func testSwitch()&#123;</span><br><span class="line">age := 18</span><br><span class="line">switch age &#123;</span><br><span class="line">case 0:</span><br><span class="line">fmt.Println(&quot;baby&quot;)</span><br><span class="line">case 12:</span><br><span class="line">fmt.Println(&quot;children&quot;)</span><br><span class="line">case 18:</span><br><span class="line">fmt.Println(&quot;young&quot;)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;man&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Fallthrough-语句"><a href="#Fallthrough-语句" class="headerlink" title="Fallthrough 语句"></a>Fallthrough 语句</h4><p>在 Go 中，每执行完一个 case 后，会从 switch 语句中跳出来，不再做后续 case 的判断和执行。使用 fallthrough 语句可以在已经执行完成的 case 之后，把控制权转移到下一个 case 的执行代码中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func testSwitch()&#123;</span><br><span class="line">age := 18</span><br><span class="line">switch age &#123;</span><br><span class="line">case 0:</span><br><span class="line">fmt.Println(&quot;baby&quot;)</span><br><span class="line">case 12:</span><br><span class="line">fmt.Println(&quot;children&quot;)</span><br><span class="line">case 18:</span><br><span class="line">fmt.Println(&quot;young&quot;)</span><br><span class="line">fallthrough</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;man&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;switch 是一个条件语句，用于将表达式的值与可能匹配的选项列表进行比较，并根据匹配情况执行相应的代码块。它可以被认为是替代多个 if else 子句的常用方式。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 9.循环语句</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-9-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-9-循环语句/</id>
    <published>2020-09-23T09:45:38.000Z</published>
    <updated>2020-09-23T09:52:20.282Z</updated>
    
    <content type="html"><![CDATA[<h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for initialisation; condition; post &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (  </span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;  </span><br><span class="line">    for i := 1; i &lt;= 10; i++ &#123;</span><br><span class="line">        fmt.Printf(&quot; %d&quot;,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h4><p>break 语句用于在完成正常执行之前突然终止 for 循环，之后程序将会在 for 循环下一行代码开始执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i:=1; i&lt;=10; i++&#123;</span><br><span class="line">if i &gt; 8 &#123;</span><br><span class="line">break //loop is terminated if i &gt; 5</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;%d &quot;, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>continue 语句用来跳出 for 循环中当前循环。在 continue 语句后的所有的 for 循环语句都不会在本次循环中执行。循环体会在一下次循环中继续执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i:=1; i&lt;=10; i++&#123;</span><br><span class="line">if i % 2 == 0 &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;%d &quot;, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序会一直无限执行下去</p><p>例子如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for&#123;</span><br><span class="line">fmt.Println(&quot;test&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;for-循环&quot;&gt;&lt;a href=&quot;#for-循环&quot; class=&quot;headerlink&quot; title=&quot;for 循环&quot;&gt;&lt;/a&gt;for 循环&lt;/h4&gt;&lt;p&gt;语法如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 8.if/else语句</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-8-if-else%E8%AF%AD%E5%8F%A5/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-8-if-else语句/</id>
    <published>2020-09-23T09:39:59.000Z</published>
    <updated>2020-09-23T09:42:57.433Z</updated>
    
    <content type="html"><![CDATA[<p>语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if condition &#123;  </span><br><span class="line">&#125; else if condition &#123;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同于其他语言，Go 语言里的 { } 是必要的，即使在 { } 之间只有一条语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (  </span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;  </span><br><span class="line">    num := 10</span><br><span class="line">    if num % 2 == 0 &#123; //checks if number is even</span><br><span class="line">        fmt.Println(&quot;the number is even&quot;) </span><br><span class="line">    &#125;  else &#123;</span><br><span class="line">        fmt.Println(&quot;the number is odd&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if 还有另外一种形式，它包含一个 statement 可选语句部分，该组件在条件判断之前运行。它的语法是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if statement; condition &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化并判断是否是偶数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (  </span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;  </span><br><span class="line">    if num := 10; num % 2 == 0 &#123;</span><br><span class="line">        fmt.Println(num,&quot;is even&quot;) </span><br><span class="line">    &#125;  else &#123;</span><br><span class="line">        fmt.Println(num,&quot;is odd&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;语法如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 7.包</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-7-%E5%8C%85/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-7-包/</id>
    <published>2020-09-23T08:59:44.000Z</published>
    <updated>2020-09-23T09:39:33.163Z</updated>
    
    <content type="html"><![CDATA[<p>包用于组织 Go 源代码，提供了更好的可重用性与可读性。<br>所有可执行的 Go 程序都必须包含一个 main 函数。这个函数是程序运行的入口。main 函数应该放置于 main 包中。<br><code>package packagename</code> 这行代码指定了某一源文件属于一个包。它应该放在每一个源文件的第一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">fmt.Println(&quot;test&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建自定义的包"><a href="#创建自定义的包" class="headerlink" title="创建自定义的包"></a>创建自定义的包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package rectangle</span><br><span class="line"></span><br><span class="line">import &quot;math&quot;</span><br><span class="line"></span><br><span class="line">func Area(length, width float64) float64&#123;</span><br><span class="line">area := length * width</span><br><span class="line">return area</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Diagonal(length, width float64) float64&#123;</span><br><span class="line">diagonal := math.Sqrt((length * length) + (width * width))</span><br><span class="line">return diagonal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sample/rectangle&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">var legth, width float64 = 3,4</span><br><span class="line">fmt.Println(&quot;area is &quot;, rectangle.Area(legth, width), </span><br><span class="line">&quot; diagonal is &quot; , rectangle.Diagonal(legth, width))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导出名字（Exported-Names）"><a href="#导出名字（Exported-Names）" class="headerlink" title="导出名字（Exported Names）"></a>导出名字（Exported Names）</h4><p>将 rectangle 包中的函数 <code>Area</code> 和 <code>Diagonal</code> 首字母大写。在 Go 中这具有特殊意义。在 Go 中，任何以大写字母开头的变量或者函数都是被导出的名字。其它包只能访问被导出的函数和变量。在这里，我们需要在 main 包中访问 Area 和 Diagonal 函数，因此会将它们的首字母大写。</p><h4 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h4><p>所有包都可以包含一个 init 函数。init 函数不应该有任何返回值类型和参数，在我们的代码中也不能显式地调用它。init 函数的形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func init() &#123;  &#125;</span><br></pre></td></tr></table></figure><p>init 函数可用于执行初始化任务，也可用于在开始执行之前验证程序的正确性。<br>包的初始化顺序如下：</p><ol><li>首先初始化包级别（Package Level）的变量</li><li>紧接着调用 init 函数。包可以有多个 init 函数（在一个文件或分布于多个文件中），它们按照编译器解析它们的顺序进行调用。</li></ol><p>如果一个包导入了另一个包，会先初始化被导入的包。<br>尽管一个包可能会被导入多次，但是它只会被初始化一次。</p><p>修改 sample 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;sample/rectangle&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var rectLen, rectWidth float64 = 3,4</span><br><span class="line"></span><br><span class="line">func init()  &#123;</span><br><span class="line">println(&quot;main package initialized&quot;)</span><br><span class="line">if rectLen &lt; 0&#123;</span><br><span class="line">log.Fatal(&quot;length is less than zero&quot;)</span><br><span class="line">&#125;</span><br><span class="line">if rectWidth &lt; 0&#123;</span><br><span class="line">log.Fatal(&quot;width is less than zero&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">fmt.Println(&quot;area is &quot;, rectangle.Area(rectLen, rectWidth))</span><br><span class="line">fmt.Println(&quot;diagonal is &quot; , rectangle.Diagonal(rectLen, rectWidth))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rectangle package initialized</span><br><span class="line">main package initialized</span><br><span class="line">area is  12</span><br><span class="line">diagonal is  5</span><br></pre></td></tr></table></figure><h4 id="使用空白标识符"><a href="#使用空白标识符" class="headerlink" title="使用空白标识符"></a>使用空白标识符</h4><p>导入包而暂不使用它,遇到这种情况就可以使用空白标识符 <code>_</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (  </span><br><span class="line">    &quot;sample/rectangle&quot; </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var _ = rectangle.Area // 错误屏蔽器</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者如下，只确保其初始化，但并未使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package main </span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    _ &quot;geometry/rectangle&quot; </span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;包用于组织 Go 源代码，提供了更好的可重用性与可读性。&lt;br&gt;所有可执行的 Go 程序都必须包含一个 main 函数。这个函数是程序运行的入口。main 函数应该放置于 main 包中。&lt;br&gt;&lt;code&gt;package packagename&lt;/code&gt; 这行代码指定
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 6.函数</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-6-%E5%87%BD%E6%95%B0/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-6-函数/</id>
    <published>2020-09-23T08:47:28.000Z</published>
    <updated>2020-09-23T08:59:21.261Z</updated>
    
    <content type="html"><![CDATA[<p><code>函数</code>是一块执行特定任务的代码。一个函数是在输入源基础上，通过执行一系列的算法，生成预期的输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func functionname(parametername type) returntype &#123;  </span><br><span class="line">    // 函数体（具体实现的功能）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func calculateBill(price int, no int) int &#123;  </span><br><span class="line">    var totalPrice = price * no // 商品总价 = 商品单价 * 数量</span><br><span class="line">    return totalPrice // 返回总价</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">calculateBill(10, 3)</span><br></pre></td></tr></table></figure><h4 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h4><p>计算面试及周长的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func rectProps(length, width float64)(float64, float64)&#123;</span><br><span class="line">var area = length * width</span><br><span class="line">var perimeter = (length + width) * 2</span><br><span class="line">return area, perimeter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">area, perimeter := rectProps(10, 30)</span><br><span class="line">fmt.Println(&quot;area is &quot;, area, &quot; perimeter is &quot;, perimeter)</span><br></pre></td></tr></table></figure><h4 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h4><p>从函数中可以返回一个命名值。一旦命名了返回值，可以认为这些值在函数第一行就被声明为变量了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func rectProps(length, width float64)(area, perimeter float64)&#123;</span><br><span class="line">var area = length * width</span><br><span class="line">var perimeter = (length + width) * 2</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h4><p>_ 在 Go 中被用作空白符，可以用作表示任何类型的任何值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">area, _ := rectProps(10.8, 5.6)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;函数&lt;/code&gt;是一块执行特定任务的代码。一个函数是在输入源基础上，通过执行一系列的算法，生成预期的输出。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 5.常量</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-5-%E5%B8%B8%E9%87%8F/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-5-常量/</id>
    <published>2020-09-23T08:10:04.000Z</published>
    <updated>2020-09-23T08:47:55.215Z</updated>
    
    <content type="html"><![CDATA[<p>关键字 const 被用于表示常量，顾名思义，常量不能再重新赋值为其他的值。因此下面的程序将不能正常工作，它将出现一个编译错误: cannot assign to a.。</p><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><p>无类型的字符串属于<code>字符串常量</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const hello = &quot;hello world&quot;</span><br></pre></td></tr></table></figure><h4 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h4><h4 id="数字常量"><a href="#数字常量" class="headerlink" title="数字常量"></a>数字常量</h4><h4 id="数字表达式"><a href="#数字表达式" class="headerlink" title="数字表达式"></a>数字表达式</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键字 const 被用于表示常量，顾名思义，常量不能再重新赋值为其他的值。因此下面的程序将不能正常工作，它将出现一个编译错误: cannot assign to a.。&lt;/p&gt;
&lt;h4 id=&quot;字符串常量&quot;&gt;&lt;a href=&quot;#字符串常量&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 4.类型</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-4-%E7%B1%BB%E5%9E%8B/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-4-类型/</id>
    <published>2020-09-23T07:04:59.000Z</published>
    <updated>2020-09-23T07:18:12.553Z</updated>
    
    <content type="html"><![CDATA[<p>GO 支持如下基本类型</p><ol><li>bool</li><li>数字类型<ul><li>int8, int16, int32, int64, int</li><li>uint8, uint16, uint32, uint64, uint</li><li>float32, float64</li><li>complex64, complex128</li><li>byte</li><li>rune</li></ul></li><li>string</li></ol><h3 id="bool-类型"><a href="#bool-类型" class="headerlink" title="bool 类型"></a>bool 类型</h3><p>表示一个布尔值，值为 <code>true</code> 或 <code>false</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := true</span><br><span class="line">b := false</span><br><span class="line">c := a &amp;&amp; b</span><br><span class="line">fmt.Println(&quot;c :=&quot;, c)</span><br></pre></td></tr></table></figure><h3 id="有符号整型"><a href="#有符号整型" class="headerlink" title="有符号整型"></a>有符号整型</h3><p>int8：表示 8 位有符号整型<br>大小：8 位<br>范围：-128～127</p><p>int16：表示 16 位有符号整型<br>大小：16 位<br>范围：-32768～32767</p><p>int32：表示 32 位有符号整型<br>大小：32 位<br>范围：-2147483648～2147483647</p><p>int64：表示 64 位有符号整型<br>大小：64 位<br>范围：-9223372036854775808～9223372036854775807</p><p>int：根据不同的底层平台（Underlying Platform），表示 32 或 64 位整型。除非对整型的大小有特定的需求，否则你通常应该使用 int 表示整型。<br>大小：在 32 位系统下是 32 位，而在 64 位系统下是 64 位。<br>范围：在 32 位系统下是 -2147483648～2147483647，而在 64 位系统是 -9223372036854775808～9223372036854775807。</p><blockquote><p>在 Printf 方法中，使用 %T 格式说明符（Format Specifier），可以打印出变量的类型;%d 用于打印字节大小。Go 的 unsafe 包提供了一个 Sizeof 函数，该函数接收变量并返回它的字节大小</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a int8 = 10</span><br><span class="line">fmt.Printf(&quot;type of a is %T, size of a is %d&quot;, a, unsafe.Sizeof(a))</span><br></pre></td></tr></table></figure><h3 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h3><p>uint8：表示 8 位无符号整型<br>大小：8 位<br>范围：0～255</p><p>uint16：表示 16 位无符号整型<br>大小：16 位<br>范围：0～65535</p><p>uint32：表示 32 位无符号整型<br>大小：32 位<br>范围：0～4294967295</p><p>uint64：表示 64 位无符号整型<br>大小：64 位<br>范围：0～18446744073709551615</p><p>uint：根据不同的底层平台，表示 32 或 64 位无符号整型。<br>大小：在 32 位系统下是 32 位，而在 64 位系统下是 64 位。<br>范围：在 32 位系统下是 0～4294967295，而在 64 位系统是 0～18446744073709551615。</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>float32：32 位浮点数<br>float64：64 位浮点数</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>complex64：实部和虚部都是 float32 类型的的复数。<br>complex128：实部和虚部都是 float64 类型的的复数。</p><h3 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GO 支持如下基本类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;数字类型&lt;ul&gt;
&lt;li&gt;int8, int16, int32, int64, int&lt;/li&gt;
&lt;li&gt;uint8, uint16, uint32, uint64, uint&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 3.变量</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-3-%E5%8F%98%E9%87%8F/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-3-变量/</id>
    <published>2020-09-23T03:20:24.000Z</published>
    <updated>2020-09-23T07:04:27.128Z</updated>
    
    <content type="html"><![CDATA[<p>变量指定了某存储单元（Memory Location）的名称，该存储单元会存储特定类型的值。在 Go 中，有多种语法用于声明变量。</p><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p><code>var name type</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var age int</span><br><span class="line">age = 29</span><br><span class="line">var age2 int = 29</span><br><span class="line">var age3 = 29</span><br></pre></td></tr></table></figure><h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><p>如果变量有初始值，则 go 能自动的进行类型推断。</p><h4 id="声明多个变量"><a href="#声明多个变量" class="headerlink" title="声明多个变量"></a>声明多个变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name1, name2 type = initialvalue1, initialvalue2</span><br></pre></td></tr></table></figure><h4 id="简短声明"><a href="#简短声明" class="headerlink" title="简短声明"></a>简短声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name := initialvalue</span><br></pre></td></tr></table></figure><p>简短声明要求 <code>:=</code> 操作符左边的所有变量都有初始值。下面程序将会抛出错误 cannot assign 1 values to 2 variables，这是因为 age 没有被赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name, age := &quot;ricky&quot; //error</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;变量指定了某存储单元（Memory Location）的名称，该存储单元会存储特定类型的值。在 Go 中，有多种语法用于声明变量。&lt;/p&gt;
&lt;h4 id=&quot;声明变量&quot;&gt;&lt;a href=&quot;#声明变量&quot; class=&quot;headerlink&quot; title=&quot;声明变量&quot;&gt;&lt;/a&gt;声
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[study golang] 2.hello world</title>
    <link href="http://10buns.cn/2020/09/23/study-golang-2-hello-world/"/>
    <id>http://10buns.cn/2020/09/23/study-golang-2-hello-world/</id>
    <published>2020-09-23T03:20:13.000Z</published>
    <updated>2020-09-23T06:53:32.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境变量简介"><a href="#环境变量简介" class="headerlink" title="环境变量简介"></a>环境变量简介</h2><h4 id="GOROOT"><a href="#GOROOT" class="headerlink" title="GOROOT"></a>GOROOT</h4><p>golang 安装路径</p><h4 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h4><p>工作目录或工作，可以是一个或多个。每个目录代表一个工作区，用于存放源代码文件(src), 安装(go install)后的归档文件(pkg目录) 和 可执行文件(bin目录)</p><h4 id="GOBIN"><a href="#GOBIN" class="headerlink" title="GOBIN"></a>GOBIN</h4><p>goroot目录下的可执行文件放置目录，一般指 bin</p><h2 id="构建及安装过程"><a href="#构建及安装过程" class="headerlink" title="构建及安装过程"></a>构建及安装过程</h2><h4 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h4><p>包含无参数编译、文件列表编译、指定包编译等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br><span class="line">-v 编译时显示包名</span><br><span class="line">-p n 开启并发编译，默认为cpu核心数</span><br><span class="line">-a 强制重新构建</span><br><span class="line">-n 打印编译时用到的命令，但不执行</span><br><span class="line">-x 打印编译时用到的命令</span><br><span class="line">-race 开启竞态检测</span><br></pre></td></tr></table></figure><h4 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a>go run</h4><p>会编译源码，并执行<code>main()函数</code>, 但不会留下可执行文件</p><h4 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h4><p>和<code>go build</code>类似，只是将编译的文件放在<code>GOPATH</code>的<code>pkg</code>目录下, 及将编译解雇固定在<code>GOPATH</code>的<code>bin</code>目录下</p><h4 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h4><p>配合参数可以显示更多的信息, 及特殊的下载和安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go get</span><br><span class="line">-v 显示操作的流程日志及信息</span><br><span class="line">-u 下载丢失的包，但不更新已下载的包</span><br><span class="line">-d 只下载</span><br><span class="line">-insecure 允许使用http进行下载</span><br></pre></td></tr></table></figure><h2 id="第一个-Hello-World"><a href="#第一个-Hello-World" class="headerlink" title="第一个 Hello World"></a>第一个 Hello World</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main //1每一个 Go 文件都应该在开头进行 package name 的声明</span><br><span class="line">//（只有可执行程序的包名应当为 main）。</span><br><span class="line">// 包（Packages）用于代码的封装与重用，这里的包名称是main。</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot; //引入的包</span><br><span class="line"></span><br><span class="line">func main() &#123; // main 是一个特殊的函数。</span><br><span class="line">//整个程序就是从 main 函数开始运行的。</span><br><span class="line">//main 函数必须放置在 main 包中。&#123; 和 &#125; 分别表示 main 函数的开始和结束部分。</span><br><span class="line">    fmt.Println(&quot;Hello World&quot;) //打印字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译与构建"><a href="#编译与构建" class="headerlink" title="编译与构建"></a>编译与构建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/summer/dev/golang_path</span><br><span class="line">cd src/helloworld</span><br><span class="line">go build main.go</span><br><span class="line">go install main.go</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境变量简介&quot;&gt;&lt;a href=&quot;#环境变量简介&quot; class=&quot;headerlink&quot; title=&quot;环境变量简介&quot;&gt;&lt;/a&gt;环境变量简介&lt;/h2&gt;&lt;h4 id=&quot;GOROOT&quot;&gt;&lt;a href=&quot;#GOROOT&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="golang" scheme="http://10buns.cn/tags/golang/"/>
    
  </entry>
  
</feed>
